{
    "SH_NODE_VALUE": {
        "category": "ShaderNode",
        "enum_name": "SH_NODE_VALUE",
        "struct_name": "Value",
        "description": "Input numerical values to other nodes in the tree",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "SH_NODE_VALTORGB": {
        "category": "ShaderNode",
        "enum_name": "SH_NODE_VALTORGB",
        "struct_name": "ValToRGB",
        "description": "Map values to colors with the use of a gradient",
        "inputs": [
            {
                "type": "decl::Float",
                "name": "Fac",
                "alias": "",
                "default_value": "0.5f",
                "description": "\n          \"The value used to map onto the color gradient. 0.0 results in the leftmost color, \"\n          \"while 1.0 results in the rightmost"
            }
        ],
        "outputs": [
            {
                "type": "decl::Float",
                "name": "Fac",
                "alias": "",
                "default_value": "0.5f",
                "description": "\n          \"The value used to map onto the color gradient. 0.0 results in the leftmost color, \"\n          \"while 1.0 results in the rightmost"
            }
        ],
        "potential_params": []
    },
    "SH_NODE_CURVE_VEC": {
        "category": "ShaderNode",
        "enum_name": "SH_NODE_CURVE_VEC",
        "struct_name": "VectorCurve",
        "description": "Map input vector components with curves",
        "inputs": [
            {
                "type": "decl::Float",
                "name": "Fac",
                "alias": "",
                "default_value": "1.0f",
                "description": "Amount of influence the node exerts on the output vector"
            },
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": "\n      \"Vector which would be mapped to the curve"
            }
        ],
        "outputs": [
            {
                "type": "decl::Float",
                "name": "Fac",
                "alias": "",
                "default_value": "1.0f",
                "description": "Amount of influence the node exerts on the output vector"
            },
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": "\n      \"Vector which would be mapped to the curve"
            }
        ],
        "potential_params": []
    },
    "SH_NODE_CURVE_RGB": {
        "category": "ShaderNode",
        "enum_name": "SH_NODE_CURVE_RGB",
        "struct_name": "RGBCurve",
        "description": "Apply color corrections for each color channel",
        "inputs": [
            {
                "type": "decl::Float",
                "name": "Fac",
                "alias": "",
                "default_value": "1.0f",
                "description": "Amount of influence the node exerts on the output vector"
            },
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": "\n      \"Vector which would be mapped to the curve"
            }
        ],
        "outputs": [
            {
                "type": "decl::Float",
                "name": "Fac",
                "alias": "",
                "default_value": "1.0f",
                "description": "Amount of influence the node exerts on the output vector"
            },
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": "\n      \"Vector which would be mapped to the curve"
            }
        ],
        "potential_params": []
    },
    "SH_NODE_MAP_RANGE": {
        "category": "ShaderNode",
        "enum_name": "SH_NODE_MAP_RANGE",
        "struct_name": "MapRange",
        "description": "Remap a value from a range to a target range",
        "inputs": [
            {
                "type": "decl::Float",
                "name": "Value",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "From Min",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "From Max",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "To Min",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "To Max",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Steps",
                "alias": "",
                "default_value": "4.0f",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "From Min",
                "alias": "From_Min_FLOAT3",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "To Min",
                "alias": "To_Min_FLOAT3",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Float",
                "name": "Value",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "From Min",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "From Max",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "To Min",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "To Max",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Steps",
                "alias": "",
                "default_value": "4.0f",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "From Min",
                "alias": "From_Min_FLOAT3",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "To Min",
                "alias": "To_Min_FLOAT3",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": [
            "data_type",
            "interpolation_type",
            "clamp"
        ]
    },
    "SH_NODE_CLAMP": {
        "category": "ShaderNode",
        "enum_name": "SH_NODE_CLAMP",
        "struct_name": "Clamp",
        "description": "Clamp a value between a minimum and a maximum",
        "inputs": [
            {
                "type": "decl::Float",
                "name": "Value",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Min",
                "alias": "",
                "default_value": "0.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Max",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Float",
                "name": "Value",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Min",
                "alias": "",
                "default_value": "0.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Max",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            }
        ],
        "potential_params": [
            "clamp_type"
        ]
    },
    "SH_NODE_MATH": {
        "category": "ShaderNode",
        "enum_name": "SH_NODE_MATH",
        "struct_name": "Math",
        "description": "Perform math operations",
        "inputs": [
            {
                "type": "decl::Float",
                "name": "Value",
                "alias": "",
                "default_value": "0.5f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Value",
                "alias": "Value_001",
                "default_value": "0.5f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Value",
                "alias": "Value_002",
                "default_value": "0.5f",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Float",
                "name": "Value",
                "alias": "",
                "default_value": "0.5f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Value",
                "alias": "Value_001",
                "default_value": "0.5f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Value",
                "alias": "Value_002",
                "default_value": "0.5f",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "SH_NODE_VECTOR_MATH": {
        "category": "ShaderNode",
        "enum_name": "SH_NODE_VECTOR_MATH",
        "struct_name": "VectorMath",
        "description": "Perform vector math operation",
        "inputs": [
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "Vector_001",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "Vector_002",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Scale",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "Vector_001",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "Vector_002",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Scale",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            }
        ],
        "potential_params": [
            "operation"
        ]
    },
    "SH_NODE_BLACKBODY": {
        "category": "ShaderNode",
        "enum_name": "SH_NODE_BLACKBODY",
        "struct_name": "Blackbody",
        "description": "Convert a blackbody temperature to an RGB value",
        "inputs": [
            {
                "type": "decl::Float",
                "name": "Temperature",
                "alias": "",
                "default_value": "1500.0f",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Float",
                "name": "Temperature",
                "alias": "",
                "default_value": "1500.0f",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "SH_NODE_TEX_GRADIENT": {
        "category": "ShaderNode",
        "enum_name": "SH_NODE_TEX_GRADIENT",
        "struct_name": "TexGradient",
        "description": "Generate interpolated color and intensity values based on the input vector",
        "inputs": [
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": [
            "gradient_type"
        ]
    },
    "SH_NODE_TEX_NOISE": {
        "category": "ShaderNode",
        "enum_name": "SH_NODE_TEX_NOISE",
        "struct_name": "TexNoise",
        "description": "Generate fractal Perlin noise",
        "inputs": [
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": [
            "noise_dimensions",
            "noise_type",
            "normalize"
        ]
    },
    "SH_NODE_TEX_MAGIC": {
        "category": "ShaderNode",
        "enum_name": "SH_NODE_TEX_MAGIC",
        "struct_name": "TexMagic",
        "description": "Generate a psychedelic color texture",
        "inputs": [
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Scale",
                "alias": "",
                "default_value": "5.0f",
                "description": "\n      \"Scale of the texture"
            },
            {
                "type": "decl::Float",
                "name": "Distortion",
                "alias": "",
                "default_value": "1.0f",
                "description": "Amount of distortion"
            }
        ],
        "outputs": [
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Scale",
                "alias": "",
                "default_value": "5.0f",
                "description": "\n      \"Scale of the texture"
            },
            {
                "type": "decl::Float",
                "name": "Distortion",
                "alias": "",
                "default_value": "1.0f",
                "description": "Amount of distortion"
            }
        ],
        "potential_params": [
            "turbulence_depth"
        ]
    },
    "SH_NODE_TEX_WAVE": {
        "category": "ShaderNode",
        "enum_name": "SH_NODE_TEX_WAVE",
        "struct_name": "TexWave",
        "description": "Generate procedural bands or rings with noise",
        "inputs": [
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Scale",
                "alias": "",
                "default_value": "5.0f",
                "description": "\n      \"Overall texture scale"
            },
            {
                "type": "decl::Float",
                "name": "Distortion",
                "alias": "",
                "default_value": "0.0f",
                "description": "Amount of distortion of the wave"
            },
            {
                "type": "decl::Float",
                "name": "Detail",
                "alias": "",
                "default_value": "2.0f",
                "description": "\n      \"Amount of distortion noise detail"
            },
            {
                "type": "decl::Float",
                "name": "Detail Scale",
                "alias": "",
                "default_value": "1.0f",
                "description": "Scale of distortion noise"
            },
            {
                "type": "decl::Float",
                "name": "Detail Roughness",
                "alias": "",
                "default_value": "0.5f",
                "description": "Blend between a smoother noise pattern, and rougher with sharper peaks"
            },
            {
                "type": "decl::Float",
                "name": "Phase Offset",
                "alias": "",
                "default_value": "0.0f",
                "description": "\n          \"Position of the wave along the Bands Direction.\\n\"\n          \"This can be used as an input for more control over the distortion"
            }
        ],
        "outputs": [
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Scale",
                "alias": "",
                "default_value": "5.0f",
                "description": "\n      \"Overall texture scale"
            },
            {
                "type": "decl::Float",
                "name": "Distortion",
                "alias": "",
                "default_value": "0.0f",
                "description": "Amount of distortion of the wave"
            },
            {
                "type": "decl::Float",
                "name": "Detail",
                "alias": "",
                "default_value": "2.0f",
                "description": "\n      \"Amount of distortion noise detail"
            },
            {
                "type": "decl::Float",
                "name": "Detail Scale",
                "alias": "",
                "default_value": "1.0f",
                "description": "Scale of distortion noise"
            },
            {
                "type": "decl::Float",
                "name": "Detail Roughness",
                "alias": "",
                "default_value": "0.5f",
                "description": "Blend between a smoother noise pattern, and rougher with sharper peaks"
            },
            {
                "type": "decl::Float",
                "name": "Phase Offset",
                "alias": "",
                "default_value": "0.0f",
                "description": "\n          \"Position of the wave along the Bands Direction.\\n\"\n          \"This can be used as an input for more control over the distortion"
            }
        ],
        "potential_params": [
            "wave_type",
            "bands_direction",
            "rings_direction",
            "wave_profile"
        ]
    },
    "SH_NODE_TEX_VORONOI": {
        "category": "ShaderNode",
        "enum_name": "SH_NODE_TEX_VORONOI",
        "struct_name": "TexVoronoi",
        "description": "Generate Worley noise based on the distance to random points. Typically used to generate textures such as stones, water, or biological cells",
        "inputs": [
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": [
            "voronoi_dimensions",
            "feature",
            "distance",
            "normalize"
        ]
    },
    "SH_NODE_TEX_CHECKER": {
        "category": "ShaderNode",
        "enum_name": "SH_NODE_TEX_CHECKER",
        "struct_name": "TexChecker",
        "description": "Generate a checkerboard texture",
        "inputs": [
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "SH_NODE_TEX_BRICK": {
        "category": "ShaderNode",
        "enum_name": "SH_NODE_TEX_BRICK",
        "struct_name": "TexBrick",
        "description": "Generate a procedural texture producing bricks",
        "inputs": [
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": [
            "offset",
            "offset_frequency",
            "squash",
            "squash_frequency"
        ]
    },
    "SH_NODE_VECTOR_ROTATE": {
        "category": "ShaderNode",
        "enum_name": "SH_NODE_VECTOR_ROTATE",
        "struct_name": "VectorRotate",
        "description": "Rotate a vector around a pivot point (center)",
        "inputs": [
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "Center",
                "alias": "",
                "default_value": "",
                "description": "Point to rotate around"
            }
        ],
        "outputs": [
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "Center",
                "alias": "",
                "default_value": "",
                "description": "Point to rotate around"
            }
        ],
        "potential_params": [
            "rotation_type",
            "invert"
        ]
    },
    "SH_NODE_SEPXYZ": {
        "category": "ShaderNode",
        "enum_name": "SH_NODE_SEPXYZ",
        "struct_name": "SeparateXYZ",
        "description": "Split a vector into its X, Y, and Z components",
        "inputs": [
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "SH_NODE_COMBXYZ": {
        "category": "ShaderNode",
        "enum_name": "SH_NODE_COMBXYZ",
        "struct_name": "CombineXYZ",
        "description": "Create a vector from X, Y, and Z components",
        "inputs": [
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "SH_NODE_TEX_WHITE_NOISE": {
        "category": "ShaderNode",
        "enum_name": "SH_NODE_TEX_WHITE_NOISE",
        "struct_name": "TexWhiteNoise",
        "description": "Return a random value or color based on an input seed",
        "inputs": [
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": [
            "noise_dimensions"
        ]
    },
    "SH_NODE_CURVE_FLOAT": {
        "category": "ShaderNode",
        "enum_name": "SH_NODE_CURVE_FLOAT",
        "struct_name": "FloatCurve",
        "description": "Map an input float to a curve and outputs a float value",
        "inputs": [
            {
                "type": "decl::Float",
                "name": "Fac",
                "alias": "",
                "default_value": "1.0f",
                "description": "Amount of influence the node exerts on the output vector"
            },
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": "\n      \"Vector which would be mapped to the curve"
            }
        ],
        "outputs": [
            {
                "type": "decl::Float",
                "name": "Fac",
                "alias": "",
                "default_value": "1.0f",
                "description": "Amount of influence the node exerts on the output vector"
            },
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": "\n      \"Vector which would be mapped to the curve"
            }
        ],
        "potential_params": []
    },
    "SH_NODE_MIX": {
        "category": "ShaderNode",
        "enum_name": "SH_NODE_MIX",
        "struct_name": "Mix",
        "description": "Mix values by a factor",
        "inputs": [
            {
                "type": "decl::Float",
                "name": "Factor",
                "alias": "Factor_Float",
                "default_value": "0.5f",
                "description": "Amount of mixing between the A and B inputs"
            },
            {
                "type": "decl::Float",
                "name": "A",
                "alias": "A_Float",
                "default_value": "",
                "description": "Value of the first floating number input"
            },
            {
                "type": "decl::Float",
                "name": "B",
                "alias": "B_Float",
                "default_value": "",
                "description": "Value of the second floating number input"
            },
            {
                "type": "decl::Vector",
                "name": "A",
                "alias": "A_Vector",
                "default_value": "",
                "description": "Value of the first vector input"
            },
            {
                "type": "decl::Vector",
                "name": "B",
                "alias": "B_Vector",
                "default_value": "",
                "description": "Value of the second vector input"
            }
        ],
        "outputs": [
            {
                "type": "decl::Float",
                "name": "Factor",
                "alias": "Factor_Float",
                "default_value": "0.5f",
                "description": "Amount of mixing between the A and B inputs"
            },
            {
                "type": "decl::Float",
                "name": "A",
                "alias": "A_Float",
                "default_value": "",
                "description": "Value of the first floating number input"
            },
            {
                "type": "decl::Float",
                "name": "B",
                "alias": "B_Float",
                "default_value": "",
                "description": "Value of the second floating number input"
            },
            {
                "type": "decl::Vector",
                "name": "A",
                "alias": "A_Vector",
                "default_value": "",
                "description": "Value of the first vector input"
            },
            {
                "type": "decl::Vector",
                "name": "B",
                "alias": "B_Vector",
                "default_value": "",
                "description": "Value of the second vector input"
            }
        ],
        "potential_params": [
            "data_type",
            "factor_mode",
            "blend_type",
            "clamp_result",
            "clamp_factor"
        ]
    },
    "FN_NODE_ALIGN_EULER_TO_VECTOR": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_ALIGN_EULER_TO_VECTOR",
        "struct_name": "AlignEulerToVector",
        "description": "",
        "inputs": [
            {
                "type": "decl::Vector",
                "name": "Rotation",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Factor",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Vector",
                "name": "Rotation",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Factor",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            }
        ],
        "potential_params": [
            "axis",
            "pivot_axis"
        ]
    },
    "FN_NODE_ALIGN_ROTATION_TO_VECTOR": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_ALIGN_ROTATION_TO_VECTOR",
        "struct_name": "AlignRotationToVector",
        "description": "",
        "inputs": [
            {
                "type": "decl::Rotation",
                "name": "Rotation",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Factor",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Rotation",
                "name": "Rotation",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Factor",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            }
        ],
        "potential_params": [
            "axis",
            "pivot_axis"
        ]
    },
    "FN_NODE_AXES_TO_ROTATION": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_AXES_TO_ROTATION",
        "struct_name": "AxesToRotation",
        "description": "Create a rotation from a primary and (ideally orthogonal) secondary axis",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "primary_axis",
            "secondary_axis"
        ]
    },
    "FN_NODE_AXIS_ANGLE_TO_ROTATION": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_AXIS_ANGLE_TO_ROTATION",
        "struct_name": "AxisAngleToRotation",
        "description": "",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "FN_NODE_BOOLEAN_MATH": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_BOOLEAN_MATH",
        "struct_name": "BooleanMath",
        "description": "",
        "inputs": [
            {
                "type": "decl::Bool",
                "name": "Boolean",
                "alias": "Boolean",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Boolean",
                "alias": "Boolean_001",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Bool",
                "name": "Boolean",
                "alias": "Boolean",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Boolean",
                "alias": "Boolean_001",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": [
            "operation"
        ]
    },
    "FN_NODE_COMBINE_COLOR": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_COMBINE_COLOR",
        "struct_name": "CombineColor",
        "description": "",
        "inputs": [
            {
                "type": "decl::Float",
                "name": "Red",
                "alias": "",
                "default_value": "0.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Green",
                "alias": "",
                "default_value": "0.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Blue",
                "alias": "",
                "default_value": "0.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Alpha",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Float",
                "name": "Red",
                "alias": "",
                "default_value": "0.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Green",
                "alias": "",
                "default_value": "0.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Blue",
                "alias": "",
                "default_value": "0.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Alpha",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            }
        ],
        "potential_params": [
            "mode"
        ]
    },
    "FN_NODE_COMBINE_MATRIX": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_COMBINE_MATRIX",
        "struct_name": "CombineMatrix",
        "description": "Construct a 4x4 matrix from its individual values",
        "inputs": [
            {
                "type": "decl::Float",
                "name": "Column 1 Row 1",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Column 1 Row 2",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Column 1 Row 3",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Column 1 Row 4",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Column 2 Row 1",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Column 2 Row 2",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Column 2 Row 3",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Column 2 Row 4",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Column 3 Row 1",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Column 3 Row 2",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Column 3 Row 3",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Column 3 Row 4",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Column 4 Row 1",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Column 4 Row 2",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Column 4 Row 3",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Column 4 Row 4",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Float",
                "name": "Column 1 Row 1",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Column 1 Row 2",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Column 1 Row 3",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Column 1 Row 4",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Column 2 Row 1",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Column 2 Row 2",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Column 2 Row 3",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Column 2 Row 4",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Column 3 Row 1",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Column 3 Row 2",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Column 3 Row 3",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Column 3 Row 4",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Column 4 Row 1",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Column 4 Row 2",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Column 4 Row 3",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Column 4 Row 4",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "FN_NODE_QUATERNION_TO_ROTATION": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_QUATERNION_TO_ROTATION",
        "struct_name": "QuaternionToRotation",
        "description": "",
        "inputs": [
            {
                "type": "decl::Float",
                "name": "W",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "X",
                "alias": "",
                "default_value": "0.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Y",
                "alias": "",
                "default_value": "0.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Z",
                "alias": "",
                "default_value": "0.0f",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Float",
                "name": "W",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "X",
                "alias": "",
                "default_value": "0.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Y",
                "alias": "",
                "default_value": "0.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Z",
                "alias": "",
                "default_value": "0.0f",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "FN_NODE_COMBINE_TRANSFORM": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_COMBINE_TRANSFORM",
        "struct_name": "CombineTransform",
        "description": "",
        "inputs": [
            {
                "type": "decl::Vector",
                "name": "Translation",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Rotation",
                "name": "Rotation",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Vector",
                "name": "Translation",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Rotation",
                "name": "Rotation",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "FN_NODE_COMPARE": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_COMPARE",
        "struct_name": "Compare",
        "description": "",
        "inputs": [
            {
                "type": "decl::Float",
                "name": "A",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "B",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "A",
                "alias": "A_INT",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "B",
                "alias": "B_INT",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "A",
                "alias": "A_VEC3",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "B",
                "alias": "B_VEC3",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Color",
                "name": "A",
                "alias": "A_COL",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Color",
                "name": "B",
                "alias": "B_COL",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::String",
                "name": "A",
                "alias": "A_STR",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::String",
                "name": "B",
                "alias": "B_STR",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "C",
                "alias": "",
                "default_value": "0.9f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Angle",
                "alias": "",
                "default_value": "0.0872665f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Epsilon",
                "alias": "",
                "default_value": "0.001",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Float",
                "name": "A",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "B",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "A",
                "alias": "A_INT",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "B",
                "alias": "B_INT",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "A",
                "alias": "A_VEC3",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "B",
                "alias": "B_VEC3",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Color",
                "name": "A",
                "alias": "A_COL",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Color",
                "name": "B",
                "alias": "B_COL",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::String",
                "name": "A",
                "alias": "A_STR",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::String",
                "name": "B",
                "alias": "B_STR",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "C",
                "alias": "",
                "default_value": "0.9f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Angle",
                "alias": "",
                "default_value": "0.0872665f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Epsilon",
                "alias": "",
                "default_value": "0.001",
                "description": ""
            }
        ],
        "potential_params": [
            "data_type",
            "mode",
            "operation"
        ]
    },
    "FN_NODE_EULER_TO_ROTATION": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_EULER_TO_ROTATION",
        "struct_name": "EulerToRotation",
        "description": "",
        "inputs": [
            {
                "type": "decl::Vector",
                "name": "Euler",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Vector",
                "name": "Euler",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "FN_NODE_FLOAT_TO_INT": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_FLOAT_TO_INT",
        "struct_name": "FloatToInt",
        "description": "",
        "inputs": [
            {
                "type": "decl::Float",
                "name": "Float",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Float",
                "name": "Float",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": [
            "rounding_mode"
        ]
    },
    "FN_NODE_INPUT_BOOL": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_INPUT_BOOL",
        "struct_name": "InputBool",
        "description": "",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "boolean"
        ]
    },
    "FN_NODE_INPUT_COLOR": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_INPUT_COLOR",
        "struct_name": "InputColor",
        "description": "",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "value"
        ]
    },
    "FN_NODE_INPUT_INT": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_INPUT_INT",
        "struct_name": "InputInt",
        "description": "",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "integer"
        ]
    },
    "FN_NODE_INPUT_ROTATION": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_INPUT_ROTATION",
        "struct_name": "InputRotation",
        "description": "",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "rotation_euler"
        ]
    },
    "FN_NODE_INPUT_SPECIAL_CHARACTERS": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_INPUT_SPECIAL_CHARACTERS",
        "struct_name": "InputSpecialCharacters",
        "description": "",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "FN_NODE_INPUT_STRING": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_INPUT_STRING",
        "struct_name": "InputString",
        "description": "",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "string"
        ]
    },
    "FN_NODE_INPUT_VECTOR": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_INPUT_VECTOR",
        "struct_name": "InputVector",
        "description": "",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "vector"
        ]
    },
    "FN_NODE_INVERT_MATRIX": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_INVERT_MATRIX",
        "struct_name": "InvertMatrix",
        "description": "",
        "inputs": [
            {
                "type": "decl::Matrix",
                "name": "Matrix",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Matrix",
                "name": "Matrix",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "FN_NODE_INVERT_ROTATION": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_INVERT_ROTATION",
        "struct_name": "InvertRotation",
        "description": "",
        "inputs": [
            {
                "type": "decl::Rotation",
                "name": "Rotation",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Rotation",
                "name": "Rotation",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "FN_NODE_MATRIX_MULTIPLY": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_MATRIX_MULTIPLY",
        "struct_name": "MatrixMultiply",
        "description": "",
        "inputs": [
            {
                "type": "decl::Matrix",
                "name": "Matrix",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Matrix",
                "name": "Matrix",
                "alias": "Matrix_001",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Matrix",
                "name": "Matrix",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Matrix",
                "name": "Matrix",
                "alias": "Matrix_001",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "FN_NODE_PROJECT_POINT": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_PROJECT_POINT",
        "struct_name": "ProjectPoint",
        "description": "Project a point using a matrix, using location, rotation, scale, and perspective divide",
        "inputs": [
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Matrix",
                "name": "Transform",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Matrix",
                "name": "Transform",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "FN_NODE_RANDOM_VALUE": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_RANDOM_VALUE",
        "struct_name": "RandomValue",
        "description": "",
        "inputs": [
            {
                "type": "decl::Vector",
                "name": "Min",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Vector",
                "name": "Min",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": [
            "data_type"
        ]
    },
    "FN_NODE_REPLACE_STRING": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_REPLACE_STRING",
        "struct_name": "ReplaceString",
        "description": "",
        "inputs": [
            {
                "type": "decl::String",
                "name": "String",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::String",
                "name": "Find",
                "alias": "",
                "default_value": "",
                "description": "The string to find in the input string"
            },
            {
                "type": "decl::String",
                "name": "Replace",
                "alias": "",
                "default_value": "",
                "description": "The string to replace each match with"
            }
        ],
        "outputs": [
            {
                "type": "decl::String",
                "name": "String",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::String",
                "name": "Find",
                "alias": "",
                "default_value": "",
                "description": "The string to find in the input string"
            },
            {
                "type": "decl::String",
                "name": "Replace",
                "alias": "",
                "default_value": "",
                "description": "The string to replace each match with"
            }
        ],
        "potential_params": []
    },
    "FN_NODE_ROTATE_EULER": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_ROTATE_EULER",
        "struct_name": "RotateEuler",
        "description": "",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "rotation_type",
            "space"
        ]
    },
    "FN_NODE_ROTATE_ROTATION": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_ROTATE_ROTATION",
        "struct_name": "RotateRotation",
        "description": "",
        "inputs": [
            {
                "type": "decl::Rotation",
                "name": "Rotation",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Rotation",
                "name": "Rotate By",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Rotation",
                "name": "Rotation",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Rotation",
                "name": "Rotate By",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": [
            "rotation_space"
        ]
    },
    "FN_NODE_ROTATE_VECTOR": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_ROTATE_VECTOR",
        "struct_name": "RotateVector",
        "description": "",
        "inputs": [
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Rotation",
                "name": "Rotation",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Rotation",
                "name": "Rotation",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "FN_NODE_ROTATION_TO_AXIS_ANGLE": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_ROTATION_TO_AXIS_ANGLE",
        "struct_name": "RotationToAxisAngle",
        "description": "",
        "inputs": [
            {
                "type": "decl::Rotation",
                "name": "Rotation",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Rotation",
                "name": "Rotation",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "FN_NODE_ROTATION_TO_EULER": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_ROTATION_TO_EULER",
        "struct_name": "RotationToEuler",
        "description": "",
        "inputs": [
            {
                "type": "decl::Rotation",
                "name": "Rotation",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Rotation",
                "name": "Rotation",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "FN_NODE_SEPARATE_COLOR": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_SEPARATE_COLOR",
        "struct_name": "SeparateColor",
        "description": "",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "mode"
        ]
    },
    "FN_NODE_SEPARATE_MATRIX": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_SEPARATE_MATRIX",
        "struct_name": "SeparateMatrix",
        "description": "Split a 4x4 matrix into its individual values",
        "inputs": [
            {
                "type": "decl::Matrix",
                "name": "Matrix",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Matrix",
                "name": "Matrix",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "FN_NODE_ROTATION_TO_QUATERNION": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_ROTATION_TO_QUATERNION",
        "struct_name": "RotationToQuaternion",
        "description": "",
        "inputs": [
            {
                "type": "decl::Rotation",
                "name": "Rotation",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Rotation",
                "name": "Rotation",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "FN_NODE_SEPARATE_TRANSFORM": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_SEPARATE_TRANSFORM",
        "struct_name": "SeparateTransform",
        "description": "",
        "inputs": [
            {
                "type": "decl::Matrix",
                "name": "Transform",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Matrix",
                "name": "Transform",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "FN_NODE_SLICE_STRING": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_SLICE_STRING",
        "struct_name": "SliceString",
        "description": "",
        "inputs": [
            {
                "type": "decl::String",
                "name": "String",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "Position",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "Length",
                "alias": "",
                "default_value": "10",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::String",
                "name": "String",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "Position",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "Length",
                "alias": "",
                "default_value": "10",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "FN_NODE_STRING_LENGTH": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_STRING_LENGTH",
        "struct_name": "StringLength",
        "description": "",
        "inputs": [
            {
                "type": "decl::String",
                "name": "String",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::String",
                "name": "String",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "FN_NODE_TRANSFORM_DIRECTION": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_TRANSFORM_DIRECTION",
        "struct_name": "TransformDirection",
        "description": "",
        "inputs": [
            {
                "type": "decl::Vector",
                "name": "Direction",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Matrix",
                "name": "Transform",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Vector",
                "name": "Direction",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Matrix",
                "name": "Transform",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "FN_NODE_TRANSFORM_POINT": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_TRANSFORM_POINT",
        "struct_name": "TransformPoint",
        "description": "",
        "inputs": [
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Matrix",
                "name": "Transform",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Matrix",
                "name": "Transform",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "FN_NODE_TRANSPOSE_MATRIX": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_TRANSPOSE_MATRIX",
        "struct_name": "TransposeMatrix",
        "description": "",
        "inputs": [
            {
                "type": "decl::Matrix",
                "name": "Matrix",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Matrix",
                "name": "Matrix",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "FN_NODE_VALUE_TO_STRING": {
        "category": "FunctionNode",
        "enum_name": "FN_NODE_VALUE_TO_STRING",
        "struct_name": "ValueToString",
        "description": "",
        "inputs": [
            {
                "type": "decl::Float",
                "name": "Value",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "Decimals",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Float",
                "name": "Value",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "Decimals",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_ACCUMULATE_FIELD": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_ACCUMULATE_FIELD",
        "struct_name": "AccumulateField",
        "description": "Add the values of an evaluated field together and output the running total for each element",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "data_type",
            "domain"
        ]
    },
    "GEO_NODE_ATTRIBUTE_DOMAIN_SIZE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_ATTRIBUTE_DOMAIN_SIZE",
        "struct_name": "AttributeDomainSize",
        "description": "Retrieve the number of elements in a geometry for each attribute domain",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": [
            "component"
        ]
    },
    "GEO_NODE_ATTRIBUTE_STATISTIC": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_ATTRIBUTE_STATISTIC",
        "struct_name": "AttributeStatistic",
        "description": "Calculate statistics about a data set from a field evaluated on a geometry",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            }
        ],
        "potential_params": [
            "data_type",
            "domain"
        ]
    },
    "GEO_NODE_BAKE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_BAKE",
        "struct_name": "Bake",
        "description": "Cache the incoming data so that it can be used without recomputation",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "name",
            "socket_type",
            "attribute_domain",
            "is_attribute",
            "bake_mode",
            "bake_mode",
            "use_custom_path",
            "directory",
            "use_custom_simulation_frame_range",
            "frame_start",
            "frame_end",
            "id"
        ]
    },
    "GEO_NODE_BLUR_ATTRIBUTE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_BLUR_ATTRIBUTE",
        "struct_name": "BlurAttribute",
        "description": "Mix attribute values of neighboring elements",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "data_type"
        ]
    },
    "GEO_NODE_BOUNDING_BOX": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_BOUNDING_BOX",
        "struct_name": "BoundBox",
        "description": "Calculate the limits of a geometry's positions and generate a box mesh with those dimensions",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_CAPTURE_ATTRIBUTE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_CAPTURE_ATTRIBUTE",
        "struct_name": "CaptureAttribute",
        "description": "Store the result of a field on a geometry and output the data as a node socket. Allows remembering or interpolating data as the geometry changes, such as positions before deformation",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": [
            "domain",
            "name",
            "domain",
            "data_type"
        ]
    },
    "GEO_NODE_COLLECTION_INFO": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_COLLECTION_INFO",
        "struct_name": "CollectionInfo",
        "description": "Retrieve geometry instances from a collection",
        "inputs": [
            {
                "type": "decl::Collection",
                "name": "Collection",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Separate Children",
                "alias": "",
                "default_value": "",
                "description": "\n          \"Output each child of the collection as a separate instance, sorted alphabetically"
            },
            {
                "type": "decl::Bool",
                "name": "Reset Children",
                "alias": "",
                "default_value": "",
                "description": "\n          \"Reset the transforms of every child instance in the output. Only used when Separate \"\n          \"Children is enabled"
            }
        ],
        "outputs": [
            {
                "type": "decl::Collection",
                "name": "Collection",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Separate Children",
                "alias": "",
                "default_value": "",
                "description": "\n          \"Output each child of the collection as a separate instance, sorted alphabetically"
            },
            {
                "type": "decl::Bool",
                "name": "Reset Children",
                "alias": "",
                "default_value": "",
                "description": "\n          \"Reset the transforms of every child instance in the output. Only used when Separate \"\n          \"Children is enabled"
            }
        ],
        "potential_params": [
            "transform_space"
        ]
    },
    "GEO_NODE_CONVEX_HULL": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_CONVEX_HULL",
        "struct_name": "ConvexHull",
        "description": "Create a mesh that encloses all points in the input geometry with the smallest number of points",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_CURVE_ENDPOINT_SELECTION": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_CURVE_ENDPOINT_SELECTION",
        "struct_name": "CurveEndpointSelection",
        "description": "Provide a selection for an arbitrary number of endpoints in each spline",
        "inputs": [
            {
                "type": "decl::Int",
                "name": "Start Size",
                "alias": "",
                "default_value": "1",
                "description": "The amount of points to select from the start of each spline"
            },
            {
                "type": "decl::Int",
                "name": "End Size",
                "alias": "",
                "default_value": "1",
                "description": "The amount of points to select from the end of each spline"
            }
        ],
        "outputs": [
            {
                "type": "decl::Int",
                "name": "Start Size",
                "alias": "",
                "default_value": "1",
                "description": "The amount of points to select from the start of each spline"
            },
            {
                "type": "decl::Int",
                "name": "End Size",
                "alias": "",
                "default_value": "1",
                "description": "The amount of points to select from the end of each spline"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_CURVE_HANDLE_TYPE_SELECTION": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_CURVE_HANDLE_TYPE_SELECTION",
        "struct_name": "CurveHandleTypeSelection",
        "description": "Provide a selection based on the handle types of Bézier control points",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "mode",
            "handle_type"
        ]
    },
    "GEO_NODE_CURVE_LENGTH": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_CURVE_LENGTH",
        "struct_name": "CurveLength",
        "description": "Retrieve the length of all splines added together",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_CURVE_PRIMITIVE_ARC": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_CURVE_PRIMITIVE_ARC",
        "struct_name": "CurveArc",
        "description": "Generate a poly spline arc",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "mode"
        ]
    },
    "GEO_NODE_CURVE_PRIMITIVE_BEZIER_SEGMENT": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_CURVE_PRIMITIVE_BEZIER_SEGMENT",
        "struct_name": "CurvePrimitiveBezierSegment",
        "description": "Generate a 2D Bézier spline from the given control points and handles",
        "inputs": [
            {
                "type": "decl::Int",
                "name": "Resolution",
                "alias": "",
                "default_value": "16",
                "description": "The number of evaluated points on the curve"
            }
        ],
        "outputs": [
            {
                "type": "decl::Int",
                "name": "Resolution",
                "alias": "",
                "default_value": "16",
                "description": "The number of evaluated points on the curve"
            }
        ],
        "potential_params": [
            "mode"
        ]
    },
    "GEO_NODE_CURVE_PRIMITIVE_CIRCLE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_CURVE_PRIMITIVE_CIRCLE",
        "struct_name": "CurvePrimitiveCircle",
        "description": "Generate a poly spline circle",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "mode"
        ]
    },
    "GEO_NODE_CURVE_PRIMITIVE_LINE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_CURVE_PRIMITIVE_LINE",
        "struct_name": "CurvePrimitiveLine",
        "description": "Generate a poly spline line with two points",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "mode"
        ]
    },
    "GEO_NODE_CURVE_PRIMITIVE_QUADRATIC_BEZIER": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_CURVE_PRIMITIVE_QUADRATIC_BEZIER",
        "struct_name": "CurveQuadraticBezier",
        "description": "Generate a poly spline in a parabola shape with control points positions",
        "inputs": [
            {
                "type": "decl::Int",
                "name": "Resolution",
                "alias": "",
                "default_value": "16",
                "description": "The number of edges on the curve"
            }
        ],
        "outputs": [
            {
                "type": "decl::Int",
                "name": "Resolution",
                "alias": "",
                "default_value": "16",
                "description": "The number of edges on the curve"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_CURVE_PRIMITIVE_QUADRILATERAL": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_CURVE_PRIMITIVE_QUADRILATERAL",
        "struct_name": "CurvePrimitiveQuadrilateral",
        "description": "Generate a polygon with four points",
        "inputs": [
            {
                "type": "decl::Float",
                "name": "Width",
                "alias": "",
                "default_value": "2.0f",
                "description": "The X axis size of the shape"
            },
            {
                "type": "decl::Float",
                "name": "Height",
                "alias": "",
                "default_value": "2.0f",
                "description": "The Y axis size of the shape"
            },
            {
                "type": "decl::Float",
                "name": "Bottom Width",
                "alias": "",
                "default_value": "4.0f",
                "description": "The X axis size of the shape"
            },
            {
                "type": "decl::Float",
                "name": "Top Width",
                "alias": "",
                "default_value": "2.0f",
                "description": "The X axis size of the shape"
            },
            {
                "type": "decl::Float",
                "name": "Offset",
                "alias": "",
                "default_value": "1.0f",
                "description": "\n          \"For Parallelogram, the relative X difference between the top and bottom edges. For \"\n          \"Trapezoid, the amount to move the top edge in the positive X axis"
            },
            {
                "type": "decl::Float",
                "name": "Bottom Height",
                "alias": "",
                "default_value": "3.0f",
                "description": "The distance between the bottom point and the X axis"
            },
            {
                "type": "decl::Float",
                "name": "Top Height",
                "alias": "",
                "default_value": "1.0f",
                "description": "The distance between the top point and the X axis"
            }
        ],
        "outputs": [
            {
                "type": "decl::Float",
                "name": "Width",
                "alias": "",
                "default_value": "2.0f",
                "description": "The X axis size of the shape"
            },
            {
                "type": "decl::Float",
                "name": "Height",
                "alias": "",
                "default_value": "2.0f",
                "description": "The Y axis size of the shape"
            },
            {
                "type": "decl::Float",
                "name": "Bottom Width",
                "alias": "",
                "default_value": "4.0f",
                "description": "The X axis size of the shape"
            },
            {
                "type": "decl::Float",
                "name": "Top Width",
                "alias": "",
                "default_value": "2.0f",
                "description": "The X axis size of the shape"
            },
            {
                "type": "decl::Float",
                "name": "Offset",
                "alias": "",
                "default_value": "1.0f",
                "description": "\n          \"For Parallelogram, the relative X difference between the top and bottom edges. For \"\n          \"Trapezoid, the amount to move the top edge in the positive X axis"
            },
            {
                "type": "decl::Float",
                "name": "Bottom Height",
                "alias": "",
                "default_value": "3.0f",
                "description": "The distance between the bottom point and the X axis"
            },
            {
                "type": "decl::Float",
                "name": "Top Height",
                "alias": "",
                "default_value": "1.0f",
                "description": "The distance between the top point and the X axis"
            }
        ],
        "potential_params": [
            "mode"
        ]
    },
    "GEO_NODE_CURVE_PRIMITIVE_SPIRAL": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_CURVE_PRIMITIVE_SPIRAL",
        "struct_name": "CurveSpiral",
        "description": "Generate a poly spline in a spiral shape",
        "inputs": [
            {
                "type": "decl::Int",
                "name": "Resolution",
                "alias": "",
                "default_value": "32",
                "description": "Number of points in one rotation of the spiral"
            },
            {
                "type": "decl::Float",
                "name": "Rotations",
                "alias": "",
                "default_value": "2.0f",
                "description": "Number of times the spiral makes a full rotation"
            },
            {
                "type": "decl::Float",
                "name": "Start Radius",
                "alias": "",
                "default_value": "1.0f",
                "description": "Horizontal Distance from the Z axis at the start of the spiral"
            },
            {
                "type": "decl::Float",
                "name": "End Radius",
                "alias": "",
                "default_value": "2.0f",
                "description": "Horizontal Distance from the Z axis at the end of the spiral"
            },
            {
                "type": "decl::Float",
                "name": "Height",
                "alias": "",
                "default_value": "2.0f",
                "description": "The height perpendicular to the base of the spiral"
            },
            {
                "type": "decl::Bool",
                "name": "Reverse",
                "alias": "",
                "default_value": "",
                "description": "\n      \"Switch the direction from clockwise to counterclockwise"
            }
        ],
        "outputs": [
            {
                "type": "decl::Int",
                "name": "Resolution",
                "alias": "",
                "default_value": "32",
                "description": "Number of points in one rotation of the spiral"
            },
            {
                "type": "decl::Float",
                "name": "Rotations",
                "alias": "",
                "default_value": "2.0f",
                "description": "Number of times the spiral makes a full rotation"
            },
            {
                "type": "decl::Float",
                "name": "Start Radius",
                "alias": "",
                "default_value": "1.0f",
                "description": "Horizontal Distance from the Z axis at the start of the spiral"
            },
            {
                "type": "decl::Float",
                "name": "End Radius",
                "alias": "",
                "default_value": "2.0f",
                "description": "Horizontal Distance from the Z axis at the end of the spiral"
            },
            {
                "type": "decl::Float",
                "name": "Height",
                "alias": "",
                "default_value": "2.0f",
                "description": "The height perpendicular to the base of the spiral"
            },
            {
                "type": "decl::Bool",
                "name": "Reverse",
                "alias": "",
                "default_value": "",
                "description": "\n      \"Switch the direction from clockwise to counterclockwise"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_CURVE_PRIMITIVE_STAR": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_CURVE_PRIMITIVE_STAR",
        "struct_name": "CurveStar",
        "description": "Generate a poly spline in a star pattern by connecting alternating points of two circles",
        "inputs": [
            {
                "type": "decl::Int",
                "name": "Points",
                "alias": "",
                "default_value": "8",
                "description": "Number of points on each of the circles"
            },
            {
                "type": "decl::Float",
                "name": "Inner Radius",
                "alias": "",
                "default_value": "1.0f",
                "description": "Radius of the inner circle; can be larger than outer radius"
            },
            {
                "type": "decl::Float",
                "name": "Outer Radius",
                "alias": "",
                "default_value": "2.0f",
                "description": "Radius of the outer circle; can be smaller than inner radius"
            },
            {
                "type": "decl::Float",
                "name": "Twist",
                "alias": "",
                "default_value": "",
                "description": "The counterclockwise rotation of the inner set of points"
            }
        ],
        "outputs": [
            {
                "type": "decl::Int",
                "name": "Points",
                "alias": "",
                "default_value": "8",
                "description": "Number of points on each of the circles"
            },
            {
                "type": "decl::Float",
                "name": "Inner Radius",
                "alias": "",
                "default_value": "1.0f",
                "description": "Radius of the inner circle; can be larger than outer radius"
            },
            {
                "type": "decl::Float",
                "name": "Outer Radius",
                "alias": "",
                "default_value": "2.0f",
                "description": "Radius of the outer circle; can be smaller than inner radius"
            },
            {
                "type": "decl::Float",
                "name": "Twist",
                "alias": "",
                "default_value": "",
                "description": "The counterclockwise rotation of the inner set of points"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_CURVE_SET_HANDLE_TYPE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_CURVE_SET_HANDLE_TYPE",
        "struct_name": "CurveSetHandles",
        "description": "Set the handle type for the control points of a Bézier curve",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Curve",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Curve",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            }
        ],
        "potential_params": [
            "mode",
            "handle_type"
        ]
    },
    "GEO_NODE_CURVE_SPLINE_PARAMETER": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_CURVE_SPLINE_PARAMETER",
        "struct_name": "SplineParameter",
        "description": "Retrieve how far along each spline a control point is",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_CURVE_SPLINE_TYPE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_CURVE_SPLINE_TYPE",
        "struct_name": "CurveSplineType",
        "description": "Change the type of curves",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Curve",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Curve",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            }
        ],
        "potential_params": [
            "spline_type"
        ]
    },
    "GEO_NODE_CURVE_TO_MESH": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_CURVE_TO_MESH",
        "struct_name": "CurveToMesh",
        "description": "Convert curves into a mesh, optionally with a custom profile shape defined by curves",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_CURVE_TO_POINTS": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_CURVE_TO_POINTS",
        "struct_name": "CurveToPoints",
        "description": "Generate a point cloud by sampling positions along curves",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "mode"
        ]
    },
    "GEO_NODE_CURVE_TOPOLOGY_CURVE_OF_POINT": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_CURVE_TOPOLOGY_CURVE_OF_POINT",
        "struct_name": "CurveOfPoint",
        "description": "Retrieve the curve a control point is part of",
        "inputs": [
            {
                "type": "decl::Int",
                "name": "Point Index",
                "alias": "",
                "default_value": "",
                "description": "The control point to retrieve data from"
            }
        ],
        "outputs": [
            {
                "type": "decl::Int",
                "name": "Point Index",
                "alias": "",
                "default_value": "",
                "description": "The control point to retrieve data from"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_CURVE_TOPOLOGY_POINTS_OF_CURVE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_CURVE_TOPOLOGY_POINTS_OF_CURVE",
        "struct_name": "PointsOfCurve",
        "description": "Retrieve a point index within a curve",
        "inputs": [
            {
                "type": "decl::Int",
                "name": "Curve Index",
                "alias": "",
                "default_value": "",
                "description": "The curve to retrieve data from. Defaults to the curve from the context"
            },
            {
                "type": "decl::Float",
                "name": "Weights",
                "alias": "",
                "default_value": "",
                "description": "\n      \"Values used to sort the curve's points. Uses indices by default"
            },
            {
                "type": "decl::Int",
                "name": "Sort Index",
                "alias": "",
                "default_value": "",
                "description": "Which of the sorted points to output"
            }
        ],
        "outputs": [
            {
                "type": "decl::Int",
                "name": "Curve Index",
                "alias": "",
                "default_value": "",
                "description": "The curve to retrieve data from. Defaults to the curve from the context"
            },
            {
                "type": "decl::Float",
                "name": "Weights",
                "alias": "",
                "default_value": "",
                "description": "\n      \"Values used to sort the curve's points. Uses indices by default"
            },
            {
                "type": "decl::Int",
                "name": "Sort Index",
                "alias": "",
                "default_value": "",
                "description": "Which of the sorted points to output"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_DEFORM_CURVES_ON_SURFACE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_DEFORM_CURVES_ON_SURFACE",
        "struct_name": "DeformCurvesOnSurface",
        "description": "Translate and rotate curves based on changes between the object's original and evaluated surface mesh",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Curves",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Curves",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_DELETE_GEOMETRY": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_DELETE_GEOMETRY",
        "struct_name": "DeleteGeometry",
        "description": "Remove selected elements of a geometry",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": "The parts of the geometry to be deleted"
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": "The parts of the geometry to be deleted"
            }
        ],
        "potential_params": [
            "domain",
            "mode"
        ]
    },
    "GEO_NODE_DISTRIBUTE_POINTS_IN_GRID": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_DISTRIBUTE_POINTS_IN_GRID",
        "struct_name": "DistributePointsInGrid",
        "description": "Generate points inside a volume grid",
        "inputs": [
            {
                "type": "decl::Float",
                "name": "Grid",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Density",
                "alias": "",
                "default_value": "1.0f",
                "description": "\n          \"When combined with each voxel's value, determines the number of points to sample per \"\n          \"unit volume"
            },
            {
                "type": "decl::Int",
                "name": "Seed",
                "alias": "",
                "default_value": "",
                "description": "\n      \"Seed used by the random number generator to generate random points"
            }
        ],
        "outputs": [
            {
                "type": "decl::Float",
                "name": "Grid",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Density",
                "alias": "",
                "default_value": "1.0f",
                "description": "\n          \"When combined with each voxel's value, determines the number of points to sample per \"\n          \"unit volume"
            },
            {
                "type": "decl::Int",
                "name": "Seed",
                "alias": "",
                "default_value": "",
                "description": "\n      \"Seed used by the random number generator to generate random points"
            }
        ],
        "potential_params": [
            "mode"
        ]
    },
    "GEO_NODE_DISTRIBUTE_POINTS_IN_VOLUME": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_DISTRIBUTE_POINTS_IN_VOLUME",
        "struct_name": "DistributePointsInVolume",
        "description": "Generate points inside a volume",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Volume",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Density",
                "alias": "",
                "default_value": "1.0f",
                "description": "Number of points to sample per unit volume"
            },
            {
                "type": "decl::Int",
                "name": "Seed",
                "alias": "",
                "default_value": "",
                "description": "\n      \"Seed used by the random number generator to generate random points"
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Volume",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Density",
                "alias": "",
                "default_value": "1.0f",
                "description": "Number of points to sample per unit volume"
            },
            {
                "type": "decl::Int",
                "name": "Seed",
                "alias": "",
                "default_value": "",
                "description": "\n      \"Seed used by the random number generator to generate random points"
            }
        ],
        "potential_params": [
            "mode"
        ]
    },
    "GEO_NODE_DISTRIBUTE_POINTS_ON_FACES": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_DISTRIBUTE_POINTS_ON_FACES",
        "struct_name": "DistributePointsOnFaces",
        "description": "Generate points spread out on the surface of a mesh",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "distribute_method",
            "use_legacy_normal"
        ]
    },
    "GEO_NODE_DUAL_MESH": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_DUAL_MESH",
        "struct_name": "DualMesh",
        "description": "Convert Faces into vertices and vertices into faces",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Keep Boundaries",
                "alias": "",
                "default_value": "false",
                "description": "\n          \"Keep non-manifold boundaries of the input mesh in place by avoiding the dual \"\n          \"transformation there"
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Keep Boundaries",
                "alias": "",
                "default_value": "false",
                "description": "\n          \"Keep non-manifold boundaries of the input mesh in place by avoiding the dual \"\n          \"transformation there"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_DUPLICATE_ELEMENTS": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_DUPLICATE_ELEMENTS",
        "struct_name": "DuplicateElements",
        "description": "Generate an arbitrary number copies of each selected input element",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "Amount",
                "alias": "",
                "default_value": "1",
                "description": "\n      \"The number of duplicates to create for each element"
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "Amount",
                "alias": "",
                "default_value": "1",
                "description": "\n      \"The number of duplicates to create for each element"
            }
        ],
        "potential_params": [
            "domain"
        ]
    },
    "GEO_NODE_EDGE_PATHS_TO_CURVES": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_EDGE_PATHS_TO_CURVES",
        "struct_name": "EdgePathsToCurves",
        "description": "Output curves following paths across mesh edges",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Start Vertices",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "Next Vertex Index",
                "alias": "",
                "default_value": "-1",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Start Vertices",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "Next Vertex Index",
                "alias": "",
                "default_value": "-1",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_EDGE_PATHS_TO_SELECTION": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_EDGE_PATHS_TO_SELECTION",
        "struct_name": "EdgePathsToSelection",
        "description": "Output a selection of edges by following paths across mesh edges",
        "inputs": [
            {
                "type": "decl::Bool",
                "name": "Start Vertices",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "Next Vertex Index",
                "alias": "",
                "default_value": "-1",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Bool",
                "name": "Start Vertices",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "Next Vertex Index",
                "alias": "",
                "default_value": "-1",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_EDGES_TO_FACE_GROUPS": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_EDGES_TO_FACE_GROUPS",
        "struct_name": "EdgesToFaceGroups",
        "description": "Group faces into regions surrounded by the selected boundary edges",
        "inputs": [
            {
                "type": "decl::Bool",
                "name": "Boundary Edges",
                "alias": "",
                "default_value": "true",
                "description": "Edges used to split faces into separate groups"
            }
        ],
        "outputs": [
            {
                "type": "decl::Bool",
                "name": "Boundary Edges",
                "alias": "",
                "default_value": "true",
                "description": "Edges used to split faces into separate groups"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_EVALUATE_AT_INDEX": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_EVALUATE_AT_INDEX",
        "struct_name": "FieldAtIndex",
        "description": "Retrieve data of other elements in the context's geometry",
        "inputs": [
            {
                "type": "decl::Int",
                "name": "Index",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Int",
                "name": "Index",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": [
            "data_type",
            "domain"
        ]
    },
    "GEO_NODE_EVALUATE_ON_DOMAIN": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_EVALUATE_ON_DOMAIN",
        "struct_name": "FieldOnDomain",
        "description": "Retrieve values from a field on a different domain besides the domain from the context",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "data_type",
            "domain"
        ]
    },
    "GEO_NODE_EXTRUDE_MESH": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_EXTRUDE_MESH",
        "struct_name": "ExtrudeMesh",
        "description": "Generate new vertices, edges, or faces from selected elements and move them based on an offset while keeping them connected by their boundary",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "Offset",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Offset Scale",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "Offset",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Offset Scale",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            }
        ],
        "potential_params": [
            "mode"
        ]
    },
    "GEO_NODE_FILL_CURVE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_FILL_CURVE",
        "struct_name": "FillCurve",
        "description": "Generate a mesh on the XY plane with faces on the inside of input curves",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "mode"
        ]
    },
    "GEO_NODE_FILLET_CURVE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_FILLET_CURVE",
        "struct_name": "FilletCurve",
        "description": "Round corners by generating circular arcs on each control point",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "mode"
        ]
    },
    "GEO_NODE_FLIP_FACES": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_FLIP_FACES",
        "struct_name": "FlipFaces",
        "description": "Reverse the order of the vertices and edges of selected faces, flipping their normal direction",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_GEOMETRY_TO_INSTANCE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_GEOMETRY_TO_INSTANCE",
        "struct_name": "GeometryToInstance",
        "description": "Convert each input geometry into an instance, which can be much faster than the Join Geometry node when the inputs are large",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_GET_NAMED_GRID": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_GET_NAMED_GRID",
        "struct_name": "GetNamedGrid",
        "description": "Get volume grid from a volume geometry with the specified name",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Volume",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::String",
                "name": "Name",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Remove",
                "alias": "",
                "default_value": "true",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Volume",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::String",
                "name": "Name",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Remove",
                "alias": "",
                "default_value": "true",
                "description": ""
            }
        ],
        "potential_params": [
            "data_type"
        ]
    },
    "GEO_NODE_GRID_TO_MESH": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_GRID_TO_MESH",
        "struct_name": "GridToMesh",
        "description": "Generate a mesh on the \\\"surface\\\" of a volume grid",
        "inputs": [
            {
                "type": "decl::Float",
                "name": "Grid",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Threshold",
                "alias": "",
                "default_value": "0.1f",
                "description": "Values larger than the threshold are inside the generated mesh"
            },
            {
                "type": "decl::Float",
                "name": "Adaptivity",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Float",
                "name": "Grid",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Threshold",
                "alias": "",
                "default_value": "0.1f",
                "description": "Values larger than the threshold are inside the generated mesh"
            },
            {
                "type": "decl::Float",
                "name": "Adaptivity",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_IMAGE_INFO": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_IMAGE_INFO",
        "struct_name": "ImageInfo",
        "description": "Retrieve information about an image",
        "inputs": [
            {
                "type": "decl::Image",
                "name": "Image",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "Frame",
                "alias": "",
                "default_value": "",
                "description": "\n      \"Which frame to use for videos. Note that different frames in videos can \"\n      \"have different resolutions"
            }
        ],
        "outputs": [
            {
                "type": "decl::Image",
                "name": "Image",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "Frame",
                "alias": "",
                "default_value": "",
                "description": "\n      \"Which frame to use for videos. Note that different frames in videos can \"\n      \"have different resolutions"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_IMAGE_TEXTURE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_IMAGE_TEXTURE",
        "struct_name": "ImageTexture",
        "description": "Sample values from an image texture",
        "inputs": [
            {
                "type": "decl::Image",
                "name": "Image",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": "Texture coordinates from 0 to 1"
            },
            {
                "type": "decl::Int",
                "name": "Frame",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Image",
                "name": "Image",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "Vector",
                "alias": "",
                "default_value": "",
                "description": "Texture coordinates from 0 to 1"
            },
            {
                "type": "decl::Int",
                "name": "Frame",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": [
            "interpolation",
            "extension"
        ]
    },
    "GEO_NODE_IMAGE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_IMAGE",
        "struct_name": "InputImage",
        "description": "Input image",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_IMPORT_STL": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_IMPORT_STL",
        "struct_name": "ImportSTL",
        "description": "Import a mesh from an STL file",
        "inputs": [
            {
                "type": "decl::String",
                "name": "Path",
                "alias": "",
                "default_value": "\"\"",
                "description": "Path to a STL file"
            }
        ],
        "outputs": [
            {
                "type": "decl::String",
                "name": "Path",
                "alias": "",
                "default_value": "\"\"",
                "description": "Path to a STL file"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_INDEX_OF_NEAREST": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INDEX_OF_NEAREST",
        "struct_name": "IndexOfNearest",
        "description": "Find the nearest element in a group. Similar to the \\\"Sample Nearest\\\" node",
        "inputs": [
            {
                "type": "decl::Vector",
                "name": "Position",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "Group ID",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Vector",
                "name": "Position",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "Group ID",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_INDEX_SWITCH": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INDEX_SWITCH",
        "struct_name": "IndexSwitch",
        "description": "Choose between an arbitrary number of values with an index",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "data_type"
        ]
    },
    "GEO_NODE_INPUT_ACTIVE_CAMERA": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INPUT_ACTIVE_CAMERA",
        "struct_name": "InputActiveCamera",
        "description": "Retrieve the scene's active camera",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_INPUT_CURVE_HANDLES": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INPUT_CURVE_HANDLES",
        "struct_name": "InputCurveHandlePositions",
        "description": "Retrieve the position of each Bézier control point's handles",
        "inputs": [
            {
                "type": "decl::Bool",
                "name": "Relative",
                "alias": "",
                "default_value": "false",
                "description": "\n          \"Output the handle positions relative to the corresponding control point \"\n          \"instead of in the local space of the geometry"
            }
        ],
        "outputs": [
            {
                "type": "decl::Bool",
                "name": "Relative",
                "alias": "",
                "default_value": "false",
                "description": "\n          \"Output the handle positions relative to the corresponding control point \"\n          \"instead of in the local space of the geometry"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_INPUT_CURVE_TILT": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INPUT_CURVE_TILT",
        "struct_name": "InputCurveTilt",
        "description": "Retrieve the angle at each control point used to twist the curve's normal around its tangent",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_INPUT_EDGE_SMOOTH": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INPUT_EDGE_SMOOTH",
        "struct_name": "InputEdgeSmooth",
        "description": "Retrieve whether each edge is marked for smooth or split normals",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_INPUT_FACE_SMOOTH": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INPUT_FACE_SMOOTH",
        "struct_name": "InputShadeSmooth",
        "description": "Retrieve whether each face is marked for smooth or sharp normals",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_INPUT_ID": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INPUT_ID",
        "struct_name": "InputID",
        "description": "Retrieve a stable random identifier value from the \\\"id\\\" attribute on the point domain, or the index if the attribute does not exist",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_INPUT_INDEX": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INPUT_INDEX",
        "struct_name": "InputIndex",
        "description": "Retrieve an integer value indicating the position of each element in the list, starting at zero",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_INPUT_INSTANCE_ROTATION": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INPUT_INSTANCE_ROTATION",
        "struct_name": "InputInstanceRotation",
        "description": "Retrieve the rotation of each instance in the geometry",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_INPUT_INSTANCE_SCALE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INPUT_INSTANCE_SCALE",
        "struct_name": "InputInstanceScale",
        "description": "Retrieve the scale of each instance in the geometry",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_INPUT_MATERIAL_INDEX": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INPUT_MATERIAL_INDEX",
        "struct_name": "InputMaterialIndex",
        "description": "Retrieve the index of the material used for each element in the geometry's list of materials",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_INPUT_INSTANCE_TRANSFORM": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INPUT_INSTANCE_TRANSFORM",
        "struct_name": "InstanceTransform",
        "description": "Retrieve the full transformation of each instance in the geometry",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_INPUT_MATERIAL": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INPUT_MATERIAL",
        "struct_name": "InputMaterial",
        "description": "Output a single material",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "material"
        ]
    },
    "GEO_NODE_INPUT_MESH_EDGE_ANGLE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INPUT_MESH_EDGE_ANGLE",
        "struct_name": "InputMeshEdgeAngle",
        "description": "Calculate the surface area of each face in a mesh",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_INPUT_MESH_EDGE_NEIGHBORS": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INPUT_MESH_EDGE_NEIGHBORS",
        "struct_name": "InputMeshEdgeNeighbors",
        "description": "Retrieve the number of faces that use each edge as one of their sides",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_INPUT_MESH_EDGE_VERTICES": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INPUT_MESH_EDGE_VERTICES",
        "struct_name": "InputMeshEdgeVertices",
        "description": "Retrieve topology information relating to each edge of a mesh",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_INPUT_MESH_FACE_AREA": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INPUT_MESH_FACE_AREA",
        "struct_name": "InputMeshFaceArea",
        "description": "Calculate the surface area of a mesh's faces",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_INPUT_MESH_FACE_IS_PLANAR": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INPUT_MESH_FACE_IS_PLANAR",
        "struct_name": "InputMeshFaceIsPlanar",
        "description": "Retrieve whether all triangles in a face are on the same plane, i.e. whether they have the same normal",
        "inputs": [
            {
                "type": "decl::Float",
                "name": "Threshold",
                "alias": "",
                "default_value": "0.01f",
                "description": "\n          \"The distance a point can be from the surface before the face is no longer \"\n          \"considered planar"
            }
        ],
        "outputs": [
            {
                "type": "decl::Float",
                "name": "Threshold",
                "alias": "",
                "default_value": "0.01f",
                "description": "\n          \"The distance a point can be from the surface before the face is no longer \"\n          \"considered planar"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_INPUT_MESH_FACE_NEIGHBORS": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INPUT_MESH_FACE_NEIGHBORS",
        "struct_name": "InputMeshFaceNeighbors",
        "description": "Retrieve topology information relating to each face of a mesh",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_INPUT_MESH_ISLAND": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INPUT_MESH_ISLAND",
        "struct_name": "InputMeshIsland",
        "description": "Retrieve information about separate connected regions in a mesh",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_INPUT_MESH_VERTEX_NEIGHBORS": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INPUT_MESH_VERTEX_NEIGHBORS",
        "struct_name": "InputMeshVertexNeighbors",
        "description": "Retrieve topology information relating to each vertex of a mesh",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_INPUT_NAMED_ATTRIBUTE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INPUT_NAMED_ATTRIBUTE",
        "struct_name": "InputNamedAttribute",
        "description": "Retrieve the data of a specified attribute",
        "inputs": [
            {
                "type": "decl::String",
                "name": "Name",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::String",
                "name": "Name",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": [
            "data_type"
        ]
    },
    "GEO_NODE_INPUT_NAMED_LAYER_SELECTION": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INPUT_NAMED_LAYER_SELECTION",
        "struct_name": "InputNamedLayerSelection",
        "description": "Output a selection of a grease pencil layer",
        "inputs": [
            {
                "type": "decl::String",
                "name": "Name",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::String",
                "name": "Name",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_INPUT_NORMAL": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INPUT_NORMAL",
        "struct_name": "InputNormal",
        "description": "Retrieve a unit length vector indicating the direction pointing away from the geometry at each element",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_INPUT_POSITION": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INPUT_POSITION",
        "struct_name": "InputPosition",
        "description": "Retrieve a vector indicating the location of each element",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_INPUT_RADIUS": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INPUT_RADIUS",
        "struct_name": "InputRadius",
        "description": "Retrieve the radius at each point on curve or point cloud geometry",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_INPUT_SCENE_TIME": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INPUT_SCENE_TIME",
        "struct_name": "InputSceneTime",
        "description": "Retrieve the current time in the scene's animation in units of seconds or frames",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_INPUT_SHORTEST_EDGE_PATHS": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INPUT_SHORTEST_EDGE_PATHS",
        "struct_name": "InputShortestEdgePaths",
        "description": "Find the shortest paths along mesh edges to selected end vertices, with customizable cost per edge",
        "inputs": [
            {
                "type": "decl::Bool",
                "name": "End Vertex",
                "alias": "",
                "default_value": "false",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Edge Cost",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Bool",
                "name": "End Vertex",
                "alias": "",
                "default_value": "false",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Edge Cost",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_INPUT_SPLINE_CYCLIC": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INPUT_SPLINE_CYCLIC",
        "struct_name": "InputSplineCyclic",
        "description": "Retrieve whether each spline endpoint connects to the beginning",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_INPUT_SPLINE_LENGTH": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INPUT_SPLINE_LENGTH",
        "struct_name": "SplineLength",
        "description": "Retrieve the total length of each spline, as a distance or as a number of points",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_INPUT_SPLINE_RESOLUTION": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INPUT_SPLINE_RESOLUTION",
        "struct_name": "InputSplineResolution",
        "description": "Retrieve the number of evaluated points that will be generated for every control point on curves",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_INPUT_TANGENT": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INPUT_TANGENT",
        "struct_name": "InputTangent",
        "description": "Retrieve the direction of curves at each control point",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_INSTANCE_ON_POINTS": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INSTANCE_ON_POINTS",
        "struct_name": "InstanceOnPoints",
        "description": "Generate a reference to geometry at each of the input points, without duplicating its underlying data",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Points",
                "alias": "",
                "default_value": "",
                "description": "Points to instance on"
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Points",
                "alias": "",
                "default_value": "",
                "description": "Points to instance on"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_INSTANCES_TO_POINTS": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INSTANCES_TO_POINTS",
        "struct_name": "InstancesToPoints",
        "description": "Generate points at the origins of instances.\\nNote: Nested instances are not affected by this node",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Instances",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "Position",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Radius",
                "alias": "",
                "default_value": "0.05f",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Instances",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "Position",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Radius",
                "alias": "",
                "default_value": "0.05f",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_INTERPOLATE_CURVES": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_INTERPOLATE_CURVES",
        "struct_name": "InterpolateCurves",
        "description": "Generate new curves on points by interpolating between existing curves",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Guide Curves",
                "alias": "",
                "default_value": "",
                "description": "Base curves that new curves are interpolated between"
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Guide Curves",
                "alias": "",
                "default_value": "",
                "description": "Base curves that new curves are interpolated between"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_IS_VIEWPORT": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_IS_VIEWPORT",
        "struct_name": "IsViewport",
        "description": "Retrieve whether the nodes are being evaluated for the viewport rather than the final render",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_JOIN_GEOMETRY": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_JOIN_GEOMETRY",
        "struct_name": "JoinGeometry",
        "description": "Merge separately generated geometries into a single one",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_MATERIAL_SELECTION": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_MATERIAL_SELECTION",
        "struct_name": "MaterialSelection",
        "description": "Provide a selection of faces that use the specified material",
        "inputs": [
            {
                "type": "decl::Material",
                "name": "Material",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Material",
                "name": "Material",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_MENU_SWITCH": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_MENU_SWITCH",
        "struct_name": "MenuSwitch",
        "description": "Select from multiple inputs by name",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "data_type",
            "name",
            "data_type",
            "description"
        ]
    },
    "GEO_NODE_MERGE_BY_DISTANCE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_MERGE_BY_DISTANCE",
        "struct_name": "MergeByDistance",
        "description": "Merge vertices or points within a given distance",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "mode"
        ]
    },
    "GEO_NODE_MESH_BOOLEAN": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_MESH_BOOLEAN",
        "struct_name": "MeshBoolean",
        "description": "Cut, subtract, or join multiple mesh inputs",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh 1",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Geometry",
                "name": "Mesh 2",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Self Intersection",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Hole Tolerant",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh 1",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Geometry",
                "name": "Mesh 2",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Self Intersection",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Hole Tolerant",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": [
            "operation",
            "solver"
        ]
    },
    "GEO_NODE_MESH_FACE_GROUP_BOUNDARIES": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_MESH_FACE_GROUP_BOUNDARIES",
        "struct_name": "MeshFaceSetBoundaries",
        "description": "Find edges on the boundaries between groups of faces with the same ID value",
        "inputs": [
            {
                "type": "decl::Int",
                "name": "Face Group ID",
                "alias": "Face Set",
                "default_value": "0",
                "description": "\n          \"An identifier for the group of each face. All contiguous faces with the \"\n          \"same value are in the same region"
            }
        ],
        "outputs": [
            {
                "type": "decl::Int",
                "name": "Face Group ID",
                "alias": "Face Set",
                "default_value": "0",
                "description": "\n          \"An identifier for the group of each face. All contiguous faces with the \"\n          \"same value are in the same region"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_MESH_PRIMITIVE_CIRCLE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_MESH_PRIMITIVE_CIRCLE",
        "struct_name": "MeshCircle",
        "description": "Generate a circular ring of edges",
        "inputs": [
            {
                "type": "decl::Int",
                "name": "Vertices",
                "alias": "",
                "default_value": "32",
                "description": "Number of vertices on the circle"
            },
            {
                "type": "decl::Float",
                "name": "Radius",
                "alias": "",
                "default_value": "1.0f",
                "description": "Distance of the vertices from the origin"
            }
        ],
        "outputs": [
            {
                "type": "decl::Int",
                "name": "Vertices",
                "alias": "",
                "default_value": "32",
                "description": "Number of vertices on the circle"
            },
            {
                "type": "decl::Float",
                "name": "Radius",
                "alias": "",
                "default_value": "1.0f",
                "description": "Distance of the vertices from the origin"
            }
        ],
        "potential_params": [
            "fill_type"
        ]
    },
    "GEO_NODE_MESH_PRIMITIVE_CONE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_MESH_PRIMITIVE_CONE",
        "struct_name": "MeshCone",
        "description": "Generate a cone mesh",
        "inputs": [
            {
                "type": "decl::Int",
                "name": "Vertices",
                "alias": "",
                "default_value": "32",
                "description": "Number of points on the circle at the top and bottom"
            },
            {
                "type": "decl::Int",
                "name": "Side Segments",
                "alias": "",
                "default_value": "1",
                "description": "The number of edges running vertically along the side of the cone"
            },
            {
                "type": "decl::Int",
                "name": "Fill Segments",
                "alias": "",
                "default_value": "1",
                "description": "Number of concentric rings used to fill the round face"
            },
            {
                "type": "decl::Float",
                "name": "Radius Top",
                "alias": "",
                "default_value": "",
                "description": "Radius of the top circle of the cone"
            },
            {
                "type": "decl::Float",
                "name": "Radius Bottom",
                "alias": "",
                "default_value": "1.0f",
                "description": "Radius of the bottom circle of the cone"
            },
            {
                "type": "decl::Float",
                "name": "Depth",
                "alias": "",
                "default_value": "2.0f",
                "description": "Height of the generated cone"
            }
        ],
        "outputs": [
            {
                "type": "decl::Int",
                "name": "Vertices",
                "alias": "",
                "default_value": "32",
                "description": "Number of points on the circle at the top and bottom"
            },
            {
                "type": "decl::Int",
                "name": "Side Segments",
                "alias": "",
                "default_value": "1",
                "description": "The number of edges running vertically along the side of the cone"
            },
            {
                "type": "decl::Int",
                "name": "Fill Segments",
                "alias": "",
                "default_value": "1",
                "description": "Number of concentric rings used to fill the round face"
            },
            {
                "type": "decl::Float",
                "name": "Radius Top",
                "alias": "",
                "default_value": "",
                "description": "Radius of the top circle of the cone"
            },
            {
                "type": "decl::Float",
                "name": "Radius Bottom",
                "alias": "",
                "default_value": "1.0f",
                "description": "Radius of the bottom circle of the cone"
            },
            {
                "type": "decl::Float",
                "name": "Depth",
                "alias": "",
                "default_value": "2.0f",
                "description": "Height of the generated cone"
            }
        ],
        "potential_params": [
            "fill_type"
        ]
    },
    "GEO_NODE_MESH_PRIMITIVE_CUBE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_MESH_PRIMITIVE_CUBE",
        "struct_name": "MeshCube",
        "description": "Generate a cuboid mesh with variable side lengths and subdivisions",
        "inputs": [
            {
                "type": "decl::Int",
                "name": "Vertices X",
                "alias": "",
                "default_value": "2",
                "description": "Number of vertices for the X side of the shape"
            },
            {
                "type": "decl::Int",
                "name": "Vertices Y",
                "alias": "",
                "default_value": "2",
                "description": "Number of vertices for the Y side of the shape"
            },
            {
                "type": "decl::Int",
                "name": "Vertices Z",
                "alias": "",
                "default_value": "2",
                "description": "Number of vertices for the Z side of the shape"
            }
        ],
        "outputs": [
            {
                "type": "decl::Int",
                "name": "Vertices X",
                "alias": "",
                "default_value": "2",
                "description": "Number of vertices for the X side of the shape"
            },
            {
                "type": "decl::Int",
                "name": "Vertices Y",
                "alias": "",
                "default_value": "2",
                "description": "Number of vertices for the Y side of the shape"
            },
            {
                "type": "decl::Int",
                "name": "Vertices Z",
                "alias": "",
                "default_value": "2",
                "description": "Number of vertices for the Z side of the shape"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_MESH_PRIMITIVE_CYLINDER": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_MESH_PRIMITIVE_CYLINDER",
        "struct_name": "MeshCylinder",
        "description": "Generate a cylinder mesh",
        "inputs": [
            {
                "type": "decl::Int",
                "name": "Vertices",
                "alias": "",
                "default_value": "32",
                "description": "The number of vertices on the top and bottom circles"
            },
            {
                "type": "decl::Int",
                "name": "Side Segments",
                "alias": "",
                "default_value": "1",
                "description": "The number of rectangular segments along each side"
            },
            {
                "type": "decl::Int",
                "name": "Fill Segments",
                "alias": "",
                "default_value": "1",
                "description": "The number of concentric rings used to fill the round faces"
            },
            {
                "type": "decl::Float",
                "name": "Radius",
                "alias": "",
                "default_value": "1.0f",
                "description": "The radius of the cylinder"
            },
            {
                "type": "decl::Float",
                "name": "Depth",
                "alias": "",
                "default_value": "2.0f",
                "description": "The height of the cylinder"
            }
        ],
        "outputs": [
            {
                "type": "decl::Int",
                "name": "Vertices",
                "alias": "",
                "default_value": "32",
                "description": "The number of vertices on the top and bottom circles"
            },
            {
                "type": "decl::Int",
                "name": "Side Segments",
                "alias": "",
                "default_value": "1",
                "description": "The number of rectangular segments along each side"
            },
            {
                "type": "decl::Int",
                "name": "Fill Segments",
                "alias": "",
                "default_value": "1",
                "description": "The number of concentric rings used to fill the round faces"
            },
            {
                "type": "decl::Float",
                "name": "Radius",
                "alias": "",
                "default_value": "1.0f",
                "description": "The radius of the cylinder"
            },
            {
                "type": "decl::Float",
                "name": "Depth",
                "alias": "",
                "default_value": "2.0f",
                "description": "The height of the cylinder"
            }
        ],
        "potential_params": [
            "fill_type"
        ]
    },
    "GEO_NODE_MESH_PRIMITIVE_GRID": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_MESH_PRIMITIVE_GRID",
        "struct_name": "MeshGrid",
        "description": "Generate a planar mesh on the XY plane",
        "inputs": [
            {
                "type": "decl::Float",
                "name": "Size X",
                "alias": "",
                "default_value": "1.0f",
                "description": "Side length of the plane in the X direction"
            },
            {
                "type": "decl::Float",
                "name": "Size Y",
                "alias": "",
                "default_value": "1.0f",
                "description": "Side length of the plane in the Y direction"
            },
            {
                "type": "decl::Int",
                "name": "Vertices X",
                "alias": "",
                "default_value": "3",
                "description": "Number of vertices in the X direction"
            },
            {
                "type": "decl::Int",
                "name": "Vertices Y",
                "alias": "",
                "default_value": "3",
                "description": "Number of vertices in the Y direction"
            }
        ],
        "outputs": [
            {
                "type": "decl::Float",
                "name": "Size X",
                "alias": "",
                "default_value": "1.0f",
                "description": "Side length of the plane in the X direction"
            },
            {
                "type": "decl::Float",
                "name": "Size Y",
                "alias": "",
                "default_value": "1.0f",
                "description": "Side length of the plane in the Y direction"
            },
            {
                "type": "decl::Int",
                "name": "Vertices X",
                "alias": "",
                "default_value": "3",
                "description": "Number of vertices in the X direction"
            },
            {
                "type": "decl::Int",
                "name": "Vertices Y",
                "alias": "",
                "default_value": "3",
                "description": "Number of vertices in the Y direction"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_MESH_PRIMITIVE_ICO_SPHERE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_MESH_PRIMITIVE_ICO_SPHERE",
        "struct_name": "MeshIcoSphere",
        "description": "Generate a spherical mesh that consists of equally sized triangles",
        "inputs": [
            {
                "type": "decl::Float",
                "name": "Radius",
                "alias": "",
                "default_value": "1.0f",
                "description": "Distance from the generated points to the origin"
            },
            {
                "type": "decl::Int",
                "name": "Subdivisions",
                "alias": "",
                "default_value": "1",
                "description": "Number of subdivisions on top of the basic icosahedron"
            }
        ],
        "outputs": [
            {
                "type": "decl::Float",
                "name": "Radius",
                "alias": "",
                "default_value": "1.0f",
                "description": "Distance from the generated points to the origin"
            },
            {
                "type": "decl::Int",
                "name": "Subdivisions",
                "alias": "",
                "default_value": "1",
                "description": "Number of subdivisions on top of the basic icosahedron"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_MESH_PRIMITIVE_LINE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_MESH_PRIMITIVE_LINE",
        "struct_name": "MeshLine",
        "description": "Generate vertices in a line and connect them with edges",
        "inputs": [
            {
                "type": "decl::Int",
                "name": "Count",
                "alias": "",
                "default_value": "10",
                "description": "\n      \"Number of vertices on the line"
            },
            {
                "type": "decl::Float",
                "name": "Resolution",
                "alias": "",
                "default_value": "1.0f",
                "description": "Length of each individual edge"
            },
            {
                "type": "decl::Vector",
                "name": "Start Location",
                "alias": "",
                "default_value": "",
                "description": "Position of the first vertex"
            }
        ],
        "outputs": [
            {
                "type": "decl::Int",
                "name": "Count",
                "alias": "",
                "default_value": "10",
                "description": "\n      \"Number of vertices on the line"
            },
            {
                "type": "decl::Float",
                "name": "Resolution",
                "alias": "",
                "default_value": "1.0f",
                "description": "Length of each individual edge"
            },
            {
                "type": "decl::Vector",
                "name": "Start Location",
                "alias": "",
                "default_value": "",
                "description": "Position of the first vertex"
            }
        ],
        "potential_params": [
            "mode",
            "count_mode"
        ]
    },
    "GEO_NODE_MESH_PRIMITIVE_UV_SPHERE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_MESH_PRIMITIVE_UV_SPHERE",
        "struct_name": "MeshUVSphere",
        "description": "Generate a spherical mesh with quads, except for triangles at the top and bottom",
        "inputs": [
            {
                "type": "decl::Int",
                "name": "Segments",
                "alias": "",
                "default_value": "32",
                "description": "Horizontal resolution of the sphere"
            },
            {
                "type": "decl::Int",
                "name": "Rings",
                "alias": "",
                "default_value": "16",
                "description": "\n      \"The number of horizontal rings"
            },
            {
                "type": "decl::Float",
                "name": "Radius",
                "alias": "",
                "default_value": "1.0f",
                "description": "Distance from the generated points to the origin"
            }
        ],
        "outputs": [
            {
                "type": "decl::Int",
                "name": "Segments",
                "alias": "",
                "default_value": "32",
                "description": "Horizontal resolution of the sphere"
            },
            {
                "type": "decl::Int",
                "name": "Rings",
                "alias": "",
                "default_value": "16",
                "description": "\n      \"The number of horizontal rings"
            },
            {
                "type": "decl::Float",
                "name": "Radius",
                "alias": "",
                "default_value": "1.0f",
                "description": "Distance from the generated points to the origin"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_MESH_TO_CURVE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_MESH_TO_CURVE",
        "struct_name": "MeshToCurve",
        "description": "Generate a curve from a mesh",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_MESH_TO_DENSITY_GRID": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_MESH_TO_DENSITY_GRID",
        "struct_name": "MeshToDensityGrid",
        "description": "Create a filled volume grid from a mesh",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Density",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Voxel Size",
                "alias": "",
                "default_value": "0.3f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Gradient Width",
                "alias": "",
                "default_value": "0.2f",
                "description": "Width of the gradient inside of the mesh"
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Density",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Voxel Size",
                "alias": "",
                "default_value": "0.3f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Gradient Width",
                "alias": "",
                "default_value": "0.2f",
                "description": "Width of the gradient inside of the mesh"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_MESH_TO_POINTS": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_MESH_TO_POINTS",
        "struct_name": "MeshToPoints",
        "description": "Generate a point cloud from a mesh's vertices",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "Position",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Radius",
                "alias": "",
                "default_value": "0.05f",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "Position",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Radius",
                "alias": "",
                "default_value": "0.05f",
                "description": ""
            }
        ],
        "potential_params": [
            "mode"
        ]
    },
    "GEO_NODE_MESH_TO_SDF_GRID": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_MESH_TO_SDF_GRID",
        "struct_name": "MeshToSDFGrid",
        "description": "Create a signed distance volume grid from a mesh",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Voxel Size",
                "alias": "",
                "default_value": "0.3f",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "Band Width",
                "alias": "",
                "default_value": "3",
                "description": "Width of the active voxel surface, in voxels"
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Voxel Size",
                "alias": "",
                "default_value": "0.3f",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "Band Width",
                "alias": "",
                "default_value": "3",
                "description": "Width of the active voxel surface, in voxels"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_MESH_TO_VOLUME": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_MESH_TO_VOLUME",
        "struct_name": "MeshToVolume",
        "description": "Create a fog volume with the shape of the input mesh's surface",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Density",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Voxel Size",
                "alias": "",
                "default_value": "0.3f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Voxel Amount",
                "alias": "",
                "default_value": "64.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Interior Band Width",
                "alias": "",
                "default_value": "0.2f",
                "description": "Width of the gradient inside of the mesh"
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Density",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Voxel Size",
                "alias": "",
                "default_value": "0.3f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Voxel Amount",
                "alias": "",
                "default_value": "64.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Interior Band Width",
                "alias": "",
                "default_value": "0.2f",
                "description": "Width of the gradient inside of the mesh"
            }
        ],
        "potential_params": [
            "resolution_mode"
        ]
    },
    "GEO_NODE_MESH_TOPOLOGY_CORNERS_OF_EDGE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_MESH_TOPOLOGY_CORNERS_OF_EDGE",
        "struct_name": "CornersOfEdge",
        "description": "Retrieve face corners connected to edges",
        "inputs": [
            {
                "type": "decl::Int",
                "name": "Edge Index",
                "alias": "",
                "default_value": "",
                "description": "The edge to retrieve data from. Defaults to the edge from the context"
            },
            {
                "type": "decl::Float",
                "name": "Weights",
                "alias": "",
                "default_value": "",
                "description": "\n      \"Values that sort the corners attached to the edge"
            },
            {
                "type": "decl::Int",
                "name": "Sort Index",
                "alias": "",
                "default_value": "",
                "description": "Which of the sorted corners to output"
            }
        ],
        "outputs": [
            {
                "type": "decl::Int",
                "name": "Edge Index",
                "alias": "",
                "default_value": "",
                "description": "The edge to retrieve data from. Defaults to the edge from the context"
            },
            {
                "type": "decl::Float",
                "name": "Weights",
                "alias": "",
                "default_value": "",
                "description": "\n      \"Values that sort the corners attached to the edge"
            },
            {
                "type": "decl::Int",
                "name": "Sort Index",
                "alias": "",
                "default_value": "",
                "description": "Which of the sorted corners to output"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_MESH_TOPOLOGY_CORNERS_OF_FACE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_MESH_TOPOLOGY_CORNERS_OF_FACE",
        "struct_name": "CornersOfFace",
        "description": "Retrieve corners that make up a face",
        "inputs": [
            {
                "type": "decl::Int",
                "name": "Face Index",
                "alias": "",
                "default_value": "",
                "description": "The face to retrieve data from. Defaults to the face from the context"
            },
            {
                "type": "decl::Float",
                "name": "Weights",
                "alias": "",
                "default_value": "",
                "description": "\n      \"Values used to sort the face's corners. Uses indices by default"
            },
            {
                "type": "decl::Int",
                "name": "Sort Index",
                "alias": "",
                "default_value": "",
                "description": "Which of the sorted corners to output"
            }
        ],
        "outputs": [
            {
                "type": "decl::Int",
                "name": "Face Index",
                "alias": "",
                "default_value": "",
                "description": "The face to retrieve data from. Defaults to the face from the context"
            },
            {
                "type": "decl::Float",
                "name": "Weights",
                "alias": "",
                "default_value": "",
                "description": "\n      \"Values used to sort the face's corners. Uses indices by default"
            },
            {
                "type": "decl::Int",
                "name": "Sort Index",
                "alias": "",
                "default_value": "",
                "description": "Which of the sorted corners to output"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_MESH_TOPOLOGY_CORNERS_OF_VERTEX": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_MESH_TOPOLOGY_CORNERS_OF_VERTEX",
        "struct_name": "CornersOfVertex",
        "description": "Retrieve face corners connected to vertices",
        "inputs": [
            {
                "type": "decl::Int",
                "name": "Vertex Index",
                "alias": "",
                "default_value": "",
                "description": "The vertex to retrieve data from. Defaults to the vertex from the context"
            },
            {
                "type": "decl::Float",
                "name": "Weights",
                "alias": "",
                "default_value": "",
                "description": "\n      \"Values used to sort corners attached to the vertex. Uses indices by default"
            },
            {
                "type": "decl::Int",
                "name": "Sort Index",
                "alias": "",
                "default_value": "",
                "description": "Which of the sorted corners to output"
            }
        ],
        "outputs": [
            {
                "type": "decl::Int",
                "name": "Vertex Index",
                "alias": "",
                "default_value": "",
                "description": "The vertex to retrieve data from. Defaults to the vertex from the context"
            },
            {
                "type": "decl::Float",
                "name": "Weights",
                "alias": "",
                "default_value": "",
                "description": "\n      \"Values used to sort corners attached to the vertex. Uses indices by default"
            },
            {
                "type": "decl::Int",
                "name": "Sort Index",
                "alias": "",
                "default_value": "",
                "description": "Which of the sorted corners to output"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_MESH_TOPOLOGY_EDGES_OF_CORNER": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_MESH_TOPOLOGY_EDGES_OF_CORNER",
        "struct_name": "EdgesOfCorner",
        "description": "Retrieve the edges on both sides of a face corner",
        "inputs": [
            {
                "type": "decl::Int",
                "name": "Corner Index",
                "alias": "",
                "default_value": "",
                "description": "The corner to retrieve data from. Defaults to the corner from the context"
            }
        ],
        "outputs": [
            {
                "type": "decl::Int",
                "name": "Corner Index",
                "alias": "",
                "default_value": "",
                "description": "The corner to retrieve data from. Defaults to the corner from the context"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_MESH_TOPOLOGY_EDGES_OF_VERTEX": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_MESH_TOPOLOGY_EDGES_OF_VERTEX",
        "struct_name": "EdgesOfVertex",
        "description": "Retrieve the edges connected to each vertex",
        "inputs": [
            {
                "type": "decl::Int",
                "name": "Vertex Index",
                "alias": "",
                "default_value": "",
                "description": "The vertex to retrieve data from. Defaults to the vertex from the context"
            },
            {
                "type": "decl::Float",
                "name": "Weights",
                "alias": "",
                "default_value": "",
                "description": "\n      \"Values used to sort the edges connected to the vertex. Uses indices by default"
            },
            {
                "type": "decl::Int",
                "name": "Sort Index",
                "alias": "",
                "default_value": "",
                "description": "Which of the sorted edges to output"
            }
        ],
        "outputs": [
            {
                "type": "decl::Int",
                "name": "Vertex Index",
                "alias": "",
                "default_value": "",
                "description": "The vertex to retrieve data from. Defaults to the vertex from the context"
            },
            {
                "type": "decl::Float",
                "name": "Weights",
                "alias": "",
                "default_value": "",
                "description": "\n      \"Values used to sort the edges connected to the vertex. Uses indices by default"
            },
            {
                "type": "decl::Int",
                "name": "Sort Index",
                "alias": "",
                "default_value": "",
                "description": "Which of the sorted edges to output"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_MESH_TOPOLOGY_FACE_OF_CORNER": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_MESH_TOPOLOGY_FACE_OF_CORNER",
        "struct_name": "FaceOfCorner",
        "description": "Retrieve the face each face corner is part of",
        "inputs": [
            {
                "type": "decl::Int",
                "name": "Corner Index",
                "alias": "",
                "default_value": "",
                "description": "The corner to retrieve data from. Defaults to the corner from the context"
            }
        ],
        "outputs": [
            {
                "type": "decl::Int",
                "name": "Corner Index",
                "alias": "",
                "default_value": "",
                "description": "The corner to retrieve data from. Defaults to the corner from the context"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_MESH_TOPOLOGY_OFFSET_CORNER_IN_FACE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_MESH_TOPOLOGY_OFFSET_CORNER_IN_FACE",
        "struct_name": "OffsetCornerInFace",
        "description": "Retrieve corners in the same face as another",
        "inputs": [
            {
                "type": "decl::Int",
                "name": "Corner Index",
                "alias": "",
                "default_value": "",
                "description": "The corner to retrieve data from. Defaults to the corner from the context"
            },
            {
                "type": "decl::Int",
                "name": "Offset",
                "alias": "",
                "default_value": "",
                "description": "\n      \"The number of corners to move around the face before finding the result, \"\n      \"circling around the start of the face if necessary"
            }
        ],
        "outputs": [
            {
                "type": "decl::Int",
                "name": "Corner Index",
                "alias": "",
                "default_value": "",
                "description": "The corner to retrieve data from. Defaults to the corner from the context"
            },
            {
                "type": "decl::Int",
                "name": "Offset",
                "alias": "",
                "default_value": "",
                "description": "\n      \"The number of corners to move around the face before finding the result, \"\n      \"circling around the start of the face if necessary"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_MESH_TOPOLOGY_VERTEX_OF_CORNER": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_MESH_TOPOLOGY_VERTEX_OF_CORNER",
        "struct_name": "VertexOfCorner",
        "description": "Retrieve the vertex each face corner is attached to",
        "inputs": [
            {
                "type": "decl::Int",
                "name": "Corner Index",
                "alias": "",
                "default_value": "",
                "description": "The corner to retrieve data from. Defaults to the corner from the context"
            }
        ],
        "outputs": [
            {
                "type": "decl::Int",
                "name": "Corner Index",
                "alias": "",
                "default_value": "",
                "description": "The corner to retrieve data from. Defaults to the corner from the context"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_OBJECT_INFO": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_OBJECT_INFO",
        "struct_name": "ObjectInfo",
        "description": "Retrieve information from an object",
        "inputs": [
            {
                "type": "decl::Object",
                "name": "Object",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "As Instance",
                "alias": "",
                "default_value": "",
                "description": "\n          \"Output the entire object as single instance. \"\n          \"This allows instancing non-geometry object types"
            }
        ],
        "outputs": [
            {
                "type": "decl::Object",
                "name": "Object",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "As Instance",
                "alias": "",
                "default_value": "",
                "description": "\n          \"Output the entire object as single instance. \"\n          \"This allows instancing non-geometry object types"
            }
        ],
        "potential_params": [
            "transform_space"
        ]
    },
    "GEO_NODE_OFFSET_POINT_IN_CURVE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_OFFSET_POINT_IN_CURVE",
        "struct_name": "OffsetPointInCurve",
        "description": "Offset a control point index within its curve",
        "inputs": [
            {
                "type": "decl::Int",
                "name": "Point Index",
                "alias": "",
                "default_value": "",
                "description": "The index of the control point to evaluate. Defaults to the current index"
            },
            {
                "type": "decl::Int",
                "name": "Offset",
                "alias": "",
                "default_value": "",
                "description": "\n      \"The number of control points along the curve to traverse"
            }
        ],
        "outputs": [
            {
                "type": "decl::Int",
                "name": "Point Index",
                "alias": "",
                "default_value": "",
                "description": "The index of the control point to evaluate. Defaults to the current index"
            },
            {
                "type": "decl::Int",
                "name": "Offset",
                "alias": "",
                "default_value": "",
                "description": "\n      \"The number of control points along the curve to traverse"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_POINTS_TO_CURVES": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_POINTS_TO_CURVES",
        "struct_name": "PointsToCurves",
        "description": "Split all points to curve by its group ID and reorder by weight",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Points",
                "alias": "",
                "default_value": "",
                "description": "Points to generate curves from"
            },
            {
                "type": "decl::Int",
                "name": "Curve Group ID",
                "alias": "",
                "default_value": "",
                "description": "\n          \"A curve is created for every distinct group ID. All points with the same ID are put \"\n          \"into the same curve"
            },
            {
                "type": "decl::Float",
                "name": "Weight",
                "alias": "",
                "default_value": "",
                "description": "\n      \"Determines the order of points in each curve"
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Points",
                "alias": "",
                "default_value": "",
                "description": "Points to generate curves from"
            },
            {
                "type": "decl::Int",
                "name": "Curve Group ID",
                "alias": "",
                "default_value": "",
                "description": "\n          \"A curve is created for every distinct group ID. All points with the same ID are put \"\n          \"into the same curve"
            },
            {
                "type": "decl::Float",
                "name": "Weight",
                "alias": "",
                "default_value": "",
                "description": "\n      \"Determines the order of points in each curve"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_POINTS_TO_SDF_GRID": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_POINTS_TO_SDF_GRID",
        "struct_name": "PointsToSDFGrid",
        "description": "Create a signed distance volume grid from points",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Points",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Radius",
                "alias": "",
                "default_value": "0.5f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Voxel Size",
                "alias": "",
                "default_value": "0.3f",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Points",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Radius",
                "alias": "",
                "default_value": "0.5f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Voxel Size",
                "alias": "",
                "default_value": "0.3f",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_POINTS_TO_VERTICES": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_POINTS_TO_VERTICES",
        "struct_name": "PointsToVertices",
        "description": "Generate a mesh vertex for each point cloud point",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Points",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Points",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_POINTS_TO_VOLUME": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_POINTS_TO_VOLUME",
        "struct_name": "PointsToVolume",
        "description": "Generate a fog volume sphere around every point",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Points",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Density",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Points",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Density",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            }
        ],
        "potential_params": [
            "resolution_mode"
        ]
    },
    "GEO_NODE_POINTS": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_POINTS",
        "struct_name": "Points",
        "description": "Generate a point cloud with positions and radii defined by fields",
        "inputs": [
            {
                "type": "decl::Int",
                "name": "Count",
                "alias": "",
                "default_value": "1",
                "description": "\n      \"The number of points to create"
            },
            {
                "type": "decl::Float",
                "name": "Radius",
                "alias": "",
                "default_value": "0.1f",
                "description": "The radii of the new points"
            }
        ],
        "outputs": [
            {
                "type": "decl::Int",
                "name": "Count",
                "alias": "",
                "default_value": "1",
                "description": "\n      \"The number of points to create"
            },
            {
                "type": "decl::Float",
                "name": "Radius",
                "alias": "",
                "default_value": "0.1f",
                "description": "The radii of the new points"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_PROXIMITY": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_PROXIMITY",
        "struct_name": "Proximity",
        "description": "Compute the closest location on the target geometry",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "target_element"
        ]
    },
    "GEO_NODE_RAYCAST": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_RAYCAST",
        "struct_name": "Raycast",
        "description": "Cast rays from the context geometry onto a target geometry, and retrieve information from each hit point",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Target Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Target Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": [
            "data_type",
            "mapping"
        ]
    },
    "GEO_NODE_REALIZE_INSTANCES": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_REALIZE_INSTANCES",
        "struct_name": "RealizeInstances",
        "description": "Convert instances into real geometry data",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": "Which top-level instances to realize"
            },
            {
                "type": "decl::Bool",
                "name": "Realize All",
                "alias": "",
                "default_value": "true",
                "description": "\n          \"Realize all levels of nested instances for a top-level instances. Overrides the value \"\n          \"of the Depth input"
            },
            {
                "type": "decl::Int",
                "name": "Depth",
                "alias": "",
                "default_value": "0",
                "description": "\n      \"Number of levels of nested instances to realize for each top-level instance"
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": "Which top-level instances to realize"
            },
            {
                "type": "decl::Bool",
                "name": "Realize All",
                "alias": "",
                "default_value": "true",
                "description": "\n          \"Realize all levels of nested instances for a top-level instances. Overrides the value \"\n          \"of the Depth input"
            },
            {
                "type": "decl::Int",
                "name": "Depth",
                "alias": "",
                "default_value": "0",
                "description": "\n      \"Number of levels of nested instances to realize for each top-level instance"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_REMOVE_ATTRIBUTE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_REMOVE_ATTRIBUTE",
        "struct_name": "RemoveAttribute",
        "description": "Delete an attribute with a specified name from a geometry. Typically used to optimize performance",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::String",
                "name": "Name",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::String",
                "name": "Name",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": [
            "pattern_mode"
        ]
    },
    "GEO_NODE_REPLACE_MATERIAL": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_REPLACE_MATERIAL",
        "struct_name": "ReplaceMaterial",
        "description": "Swap one material with another",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_RESAMPLE_CURVE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_RESAMPLE_CURVE",
        "struct_name": "ResampleCurve",
        "description": "Generate a poly spline for each input spline",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "mode"
        ]
    },
    "GEO_NODE_REVERSE_CURVE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_REVERSE_CURVE",
        "struct_name": "ReverseCurve",
        "description": "Change the direction of curves by swapping their start and end data",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_ROTATE_INSTANCES": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_ROTATE_INSTANCES",
        "struct_name": "RotateInstances",
        "description": "Rotate geometry instances in local or global space",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Instances",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Rotation",
                "name": "Rotation",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "Pivot Point",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Local Space",
                "alias": "",
                "default_value": "true",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Instances",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Rotation",
                "name": "Rotation",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "Pivot Point",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Local Space",
                "alias": "",
                "default_value": "true",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_SAMPLE_CURVE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SAMPLE_CURVE",
        "struct_name": "SampleCurve",
        "description": "Retrieve data from a point on a curve at a certain distance from its start",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Curves",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Curves",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": [
            "data_type",
            "mode",
            "use_all_curves"
        ]
    },
    "GEO_NODE_SAMPLE_GRID": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SAMPLE_GRID",
        "struct_name": "SampleGrid",
        "description": "",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "data_type",
            "interpolation_mode"
        ]
    },
    "GEO_NODE_SAMPLE_GRID_INDEX": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SAMPLE_GRID_INDEX",
        "struct_name": "SampleGridIndex",
        "description": "Retrieve volume grid values at specific voxels",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "data_type"
        ]
    },
    "GEO_NODE_SAMPLE_INDEX": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SAMPLE_INDEX",
        "struct_name": "SampleIndex",
        "description": "Retrieve values from specific geometry elements",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "data_type",
            "domain",
            "clamp"
        ]
    },
    "GEO_NODE_SAMPLE_NEAREST_SURFACE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SAMPLE_NEAREST_SURFACE",
        "struct_name": "SampleNearestSurface",
        "description": "Calculate the interpolated value of a mesh attribute on the closest point of its surface",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": [
            "data_type"
        ]
    },
    "GEO_NODE_SAMPLE_NEAREST": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SAMPLE_NEAREST",
        "struct_name": "SampleNearest",
        "description": "Find the element of a geometry closest to a position. Similar to the \\\"Index of Nearest\\\" node",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "domain"
        ]
    },
    "GEO_NODE_SAMPLE_UV_SURFACE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SAMPLE_UV_SURFACE",
        "struct_name": "SampleUVSurface",
        "description": "Calculate the interpolated values of a mesh attribute at a UV coordinate",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": [
            "data_type"
        ]
    },
    "GEO_NODE_SCALE_ELEMENTS": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SCALE_ELEMENTS",
        "struct_name": "ScaleElements",
        "description": "Scale groups of connected edges and faces",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Scale",
                "alias": "Scale",
                "default_value": "1.0f",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "Center",
                "alias": "",
                "default_value": "",
                "description": "\n          \"Origin of the scaling for each element. If multiple elements are connected, their \"\n          \"center is averaged"
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Scale",
                "alias": "Scale",
                "default_value": "1.0f",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "Center",
                "alias": "",
                "default_value": "",
                "description": "\n          \"Origin of the scaling for each element. If multiple elements are connected, their \"\n          \"center is averaged"
            }
        ],
        "potential_params": [
            "domain",
            "scale_mode"
        ]
    },
    "GEO_NODE_SCALE_INSTANCES": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SCALE_INSTANCES",
        "struct_name": "ScaleInstances",
        "description": "Scale geometry instances in local or global space",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Instances",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Instances",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_SDF_GRID_BOOLEAN": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SDF_GRID_BOOLEAN",
        "struct_name": "SDFGridBoolean",
        "description": "Cut, subtract, or join multiple SDF volume grid inputs",
        "inputs": [
            {
                "type": "decl::Float",
                "name": "Grid 1",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Float",
                "name": "Grid 1",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": [
            "operation"
        ]
    },
    "GEO_NODE_SELF_OBJECT": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SELF_OBJECT",
        "struct_name": "SelfObject",
        "description": "Retrieve the object that contains the geometry nodes modifier currently being executed",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_SEPARATE_COMPONENTS": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SEPARATE_COMPONENTS",
        "struct_name": "SeparateComponents",
        "description": "Split a geometry into a separate output for each type of data in the geometry",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_SEPARATE_GEOMETRY": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SEPARATE_GEOMETRY",
        "struct_name": "SeparateGeometry",
        "description": "Split a geometry into two geometry outputs based on a selection",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": "The parts of the geometry that go into the first output"
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": "The parts of the geometry that go into the first output"
            }
        ],
        "potential_params": [
            "domain"
        ]
    },
    "GEO_NODE_SET_CURVE_HANDLES": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SET_CURVE_HANDLES",
        "struct_name": "SetCurveHandlePositions",
        "description": "Set the positions for the handles of Bézier curves",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Curve",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Curve",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            }
        ],
        "potential_params": [
            "mode"
        ]
    },
    "GEO_NODE_SET_CURVE_NORMAL": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SET_CURVE_NORMAL",
        "struct_name": "SetCurveNormal",
        "description": "Set the evaluation mode for curve normals",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "mode"
        ]
    },
    "GEO_NODE_SET_CURVE_RADIUS": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SET_CURVE_RADIUS",
        "struct_name": "SetCurveRadius",
        "description": "Set the radius of the curve at each control point",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_SET_CURVE_TILT": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SET_CURVE_TILT",
        "struct_name": "SetCurveTilt",
        "description": "Set the tilt angle at each curve control point",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_SET_ID": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SET_ID",
        "struct_name": "SetID",
        "description": "Set the id attribute on the input geometry, mainly used internally for randomizing",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "ID",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "ID",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_SET_MATERIAL_INDEX": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SET_MATERIAL_INDEX",
        "struct_name": "SetMaterialIndex",
        "description": "Set the material index for each selected geometry element",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_SET_MATERIAL": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SET_MATERIAL",
        "struct_name": "SetMaterial",
        "description": "Assign a material to geometry elements",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_SET_POINT_RADIUS": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SET_POINT_RADIUS",
        "struct_name": "SetPointRadius",
        "description": "Set the display size of point cloud points",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Points",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Radius",
                "alias": "",
                "default_value": "0.05f",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Points",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Radius",
                "alias": "",
                "default_value": "0.05f",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_SET_POSITION": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SET_POSITION",
        "struct_name": "SetPosition",
        "description": "Set the location of each point",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "Position",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "Offset",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "Position",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "Offset",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_SET_SHADE_SMOOTH": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SET_SHADE_SMOOTH",
        "struct_name": "SetShadeSmooth",
        "description": "Control the smoothness of mesh normals around each face by changing the \\\"shade smooth\\\" attribute",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Shade Smooth",
                "alias": "",
                "default_value": "true",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Shade Smooth",
                "alias": "",
                "default_value": "true",
                "description": ""
            }
        ],
        "potential_params": [
            "domain"
        ]
    },
    "GEO_NODE_SET_SPLINE_CYCLIC": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SET_SPLINE_CYCLIC",
        "struct_name": "SetSplineCyclic",
        "description": "Control whether each spline loops back on itself by changing the \\\"cyclic\\\" attribute",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_SET_SPLINE_RESOLUTION": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SET_SPLINE_RESOLUTION",
        "struct_name": "SetSplineResolution",
        "description": "Control how many evaluated points should be generated on every curve segment",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_SET_INSTANCE_TRANSFORM": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SET_INSTANCE_TRANSFORM",
        "struct_name": "SetInstanceTransform",
        "description": "Set the transformation matrix of every instance",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Instances",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Matrix",
                "name": "Transform",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Instances",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Matrix",
                "name": "Transform",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_SORT_ELEMENTS": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SORT_ELEMENTS",
        "struct_name": "SortElements",
        "description": "Rearrange geometry elements, changing their indices",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "Group ID",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Sort Weight",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "Group ID",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Sort Weight",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": [
            "domain"
        ]
    },
    "GEO_NODE_SPLIT_EDGES": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SPLIT_EDGES",
        "struct_name": "SplitEdges",
        "description": "Duplicate mesh edges and break connections with the surrounding faces",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_SPLIT_TO_INSTANCES": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SPLIT_TO_INSTANCES",
        "struct_name": "SplitToInstances",
        "description": "Create separate geometries containing the elements from the same group",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "domain"
        ]
    },
    "GEO_NODE_STORE_NAMED_ATTRIBUTE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_STORE_NAMED_ATTRIBUTE",
        "struct_name": "StoreNamedAttribute",
        "description": "Store the result of a field on a geometry as an attribute with the specified name",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::String",
                "name": "Name",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::String",
                "name": "Name",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": [
            "data_type",
            "domain"
        ]
    },
    "GEO_NODE_STORE_NAMED_GRID": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_STORE_NAMED_GRID",
        "struct_name": "StoreNamedGrid",
        "description": "Store grid data in a volume geometry with the specified name",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Volume",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::String",
                "name": "Name",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Volume",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::String",
                "name": "Name",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": [
            "data_type"
        ]
    },
    "GEO_NODE_STRING_JOIN": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_STRING_JOIN",
        "struct_name": "StringJoin",
        "description": "Combine any number of input strings",
        "inputs": [
            {
                "type": "decl::String",
                "name": "Delimiter",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::String",
                "name": "Strings",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::String",
                "name": "Delimiter",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::String",
                "name": "Strings",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_STRING_TO_CURVES": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_STRING_TO_CURVES",
        "struct_name": "StringToCurves",
        "description": "Generate a paragraph of text with a specific font, using a curve instance to store each character",
        "inputs": [
            {
                "type": "decl::String",
                "name": "String",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Size",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Character Spacing",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Word Spacing",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Line Spacing",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Text Box Width",
                "alias": "",
                "default_value": "0.0f",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::String",
                "name": "String",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Size",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Character Spacing",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Word Spacing",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Line Spacing",
                "alias": "",
                "default_value": "1.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Text Box Width",
                "alias": "",
                "default_value": "0.0f",
                "description": ""
            }
        ],
        "potential_params": [
            "overflow",
            "align_x",
            "align_y",
            "pivot_mode"
        ]
    },
    "GEO_NODE_SUBDIVIDE_CURVE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SUBDIVIDE_CURVE",
        "struct_name": "SubdivideCurve",
        "description": "Dividing each curve segment into a specified number of pieces",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_SUBDIVIDE_MESH": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SUBDIVIDE_MESH",
        "struct_name": "SubdivideMesh",
        "description": "Divide mesh faces into smaller ones without changing the shape or volume, using linear interpolation to place the new vertices",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "Level",
                "alias": "",
                "default_value": "1",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "Level",
                "alias": "",
                "default_value": "1",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_SUBDIVISION_SURFACE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SUBDIVISION_SURFACE",
        "struct_name": "SubdivisionSurface",
        "description": "Divide mesh faces to form a smooth surface, using the Catmull-Clark subdivision method",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "Level",
                "alias": "",
                "default_value": "1",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Edge Crease",
                "alias": "",
                "default_value": "0.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Vertex Crease",
                "alias": "",
                "default_value": "0.0f",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "Level",
                "alias": "",
                "default_value": "1",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Edge Crease",
                "alias": "",
                "default_value": "0.0f",
                "description": ""
            },
            {
                "type": "decl::Float",
                "name": "Vertex Crease",
                "alias": "",
                "default_value": "0.0f",
                "description": ""
            }
        ],
        "potential_params": [
            "uv_smooth",
            "boundary_smooth"
        ]
    },
    "GEO_NODE_SWITCH": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_SWITCH",
        "struct_name": "Switch",
        "description": "Switch between two inputs",
        "inputs": [
            {
                "type": "decl::Bool",
                "name": "Switch",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Bool",
                "name": "Switch",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": [
            "input_type"
        ]
    },
    "GEO_NODE_TOOL_3D_CURSOR": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_TOOL_3D_CURSOR",
        "struct_name": "Tool3DCursor",
        "description": "The scene's 3D cursor location and rotation",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_TOOL_FACE_SET": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_TOOL_FACE_SET",
        "struct_name": "ToolFaceSet",
        "description": "Each face's sculpt face set value",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_TOOL_MOUSE_POSITION": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_TOOL_MOUSE_POSITION",
        "struct_name": "ToolMousePosition",
        "description": "Retrieve the position of the mouse cursor",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_TOOL_SELECTION": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_TOOL_SELECTION",
        "struct_name": "ToolSelection",
        "description": "User selection of the edited geometry, for tool execution",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_TOOL_ACTIVE_ELEMENT": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_TOOL_ACTIVE_ELEMENT",
        "struct_name": "ToolActiveElement",
        "description": "Active element indices of the edited geometry, for tool execution",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "domain"
        ]
    },
    "GEO_NODE_TOOL_SET_FACE_SET": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_TOOL_SET_FACE_SET",
        "struct_name": "ToolSetFaceSet",
        "description": "Set sculpt face set values for faces",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "Face Set",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "Face Set",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_TOOL_SET_SELECTION": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_TOOL_SET_SELECTION",
        "struct_name": "ToolSetSelection",
        "description": "Set selection of the edited geometry, for tool execution",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            }
        ],
        "potential_params": [
            "domain"
        ]
    },
    "GEO_NODE_TOOL_VIEWPORT_TRANSFORM": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_TOOL_VIEWPORT_TRANSFORM",
        "struct_name": "ViewportTransform",
        "description": "Retrieve the view direction and location of the 3D viewport",
        "inputs": [],
        "outputs": [],
        "potential_params": []
    },
    "GEO_NODE_TRANSFORM_GEOMETRY": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_TRANSFORM_GEOMETRY",
        "struct_name": "Transform",
        "description": "Translate, rotate or scale the geometry",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "Translation",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Rotation",
                "name": "Rotation",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "Translation",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Rotation",
                "name": "Rotation",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": [
            "mode"
        ]
    },
    "GEO_NODE_TRANSLATE_INSTANCES": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_TRANSLATE_INSTANCES",
        "struct_name": "TranslateInstances",
        "description": "Move top-level geometry instances in local or global space",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Instances",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "Translation",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Local Space",
                "alias": "",
                "default_value": "true",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Instances",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Vector",
                "name": "Translation",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Local Space",
                "alias": "",
                "default_value": "true",
                "description": ""
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_TRIANGULATE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_TRIANGULATE",
        "struct_name": "Triangulate",
        "description": "Convert all faces in a mesh to triangular faces",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "Minimum Vertices",
                "alias": "",
                "default_value": "4",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Mesh",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": ""
            },
            {
                "type": "decl::Int",
                "name": "Minimum Vertices",
                "alias": "",
                "default_value": "4",
                "description": ""
            }
        ],
        "potential_params": [
            "quad_method",
            "ngon_method"
        ]
    },
    "GEO_NODE_TRIM_CURVE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_TRIM_CURVE",
        "struct_name": "TrimCurve",
        "description": "Shorten curves by removing portions at the start or end",
        "inputs": [],
        "outputs": [],
        "potential_params": [
            "mode"
        ]
    },
    "GEO_NODE_UV_PACK_ISLANDS": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_UV_PACK_ISLANDS",
        "struct_name": "UVPackIslands",
        "description": "Scale islands of a UV map and move them so they fill the UV space as much as possible",
        "inputs": [
            {
                "type": "decl::Vector",
                "name": "UV",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": "Faces to consider when packing islands"
            },
            {
                "type": "decl::Float",
                "name": "Margin",
                "alias": "",
                "default_value": "0.001f",
                "description": "\n      \"Space between islands"
            },
            {
                "type": "decl::Bool",
                "name": "Rotate",
                "alias": "",
                "default_value": "true",
                "description": "Rotate islands for best fit"
            }
        ],
        "outputs": [
            {
                "type": "decl::Vector",
                "name": "UV",
                "alias": "",
                "default_value": "",
                "description": ""
            },
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": "Faces to consider when packing islands"
            },
            {
                "type": "decl::Float",
                "name": "Margin",
                "alias": "",
                "default_value": "0.001f",
                "description": "\n      \"Space between islands"
            },
            {
                "type": "decl::Bool",
                "name": "Rotate",
                "alias": "",
                "default_value": "true",
                "description": "Rotate islands for best fit"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_UV_UNWRAP": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_UV_UNWRAP",
        "struct_name": "UVUnwrap",
        "description": "Generate a UV map based on seam edges",
        "inputs": [
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": "Faces to participate in the unwrap operation"
            },
            {
                "type": "decl::Bool",
                "name": "Seam",
                "alias": "",
                "default_value": "",
                "description": "\n      \"Edges to mark where the mesh is \\\"cut\\\" for the purposes of unwrapping"
            },
            {
                "type": "decl::Float",
                "name": "Margin",
                "alias": "",
                "default_value": "0.001f",
                "description": "\n      \"Space between islands"
            },
            {
                "type": "decl::Bool",
                "name": "Fill Holes",
                "alias": "",
                "default_value": "true",
                "description": "\n          \"Virtually fill holes in mesh before unwrapping, to better avoid overlaps \"\n          \"and preserve symmetry"
            }
        ],
        "outputs": [
            {
                "type": "decl::Bool",
                "name": "Selection",
                "alias": "",
                "default_value": "true",
                "description": "Faces to participate in the unwrap operation"
            },
            {
                "type": "decl::Bool",
                "name": "Seam",
                "alias": "",
                "default_value": "",
                "description": "\n      \"Edges to mark where the mesh is \\\"cut\\\" for the purposes of unwrapping"
            },
            {
                "type": "decl::Float",
                "name": "Margin",
                "alias": "",
                "default_value": "0.001f",
                "description": "\n      \"Space between islands"
            },
            {
                "type": "decl::Bool",
                "name": "Fill Holes",
                "alias": "",
                "default_value": "true",
                "description": "\n          \"Virtually fill holes in mesh before unwrapping, to better avoid overlaps \"\n          \"and preserve symmetry"
            }
        ],
        "potential_params": [
            "method"
        ]
    },
    "GEO_NODE_VIEWER": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_VIEWER",
        "struct_name": "Viewer",
        "description": "Display the input data in the Spreadsheet Editor",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Geometry",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": [
            "domain",
            "data_type"
        ]
    },
    "GEO_NODE_VOLUME_CUBE": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_VOLUME_CUBE",
        "struct_name": "VolumeCube",
        "description": "Generate a dense volume with a field that controls the density at each grid voxel based on its position",
        "inputs": [
            {
                "type": "decl::Float",
                "name": "Density",
                "alias": "",
                "default_value": "1.0f",
                "description": "Volume density per voxel"
            },
            {
                "type": "decl::Float",
                "name": "Background",
                "alias": "",
                "default_value": "",
                "description": "Value for voxels outside of the cube"
            },
            {
                "type": "decl::Int",
                "name": "Resolution X",
                "alias": "",
                "default_value": "32",
                "description": "Number of voxels in the X axis"
            },
            {
                "type": "decl::Int",
                "name": "Resolution Y",
                "alias": "",
                "default_value": "32",
                "description": "Number of voxels in the Y axis"
            },
            {
                "type": "decl::Int",
                "name": "Resolution Z",
                "alias": "",
                "default_value": "32",
                "description": "Number of voxels in the Z axis"
            }
        ],
        "outputs": [
            {
                "type": "decl::Float",
                "name": "Density",
                "alias": "",
                "default_value": "1.0f",
                "description": "Volume density per voxel"
            },
            {
                "type": "decl::Float",
                "name": "Background",
                "alias": "",
                "default_value": "",
                "description": "Value for voxels outside of the cube"
            },
            {
                "type": "decl::Int",
                "name": "Resolution X",
                "alias": "",
                "default_value": "32",
                "description": "Number of voxels in the X axis"
            },
            {
                "type": "decl::Int",
                "name": "Resolution Y",
                "alias": "",
                "default_value": "32",
                "description": "Number of voxels in the Y axis"
            },
            {
                "type": "decl::Int",
                "name": "Resolution Z",
                "alias": "",
                "default_value": "32",
                "description": "Number of voxels in the Z axis"
            }
        ],
        "potential_params": []
    },
    "GEO_NODE_VOLUME_TO_MESH": {
        "category": "GeometryNode",
        "enum_name": "GEO_NODE_VOLUME_TO_MESH",
        "struct_name": "VolumeToMesh",
        "description": "Generate a mesh on the \\\"surface\\\" of a volume",
        "inputs": [
            {
                "type": "decl::Geometry",
                "name": "Volume",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "outputs": [
            {
                "type": "decl::Geometry",
                "name": "Volume",
                "alias": "",
                "default_value": "",
                "description": ""
            }
        ],
        "potential_params": [
            "resolution_mode"
        ]
    }
}